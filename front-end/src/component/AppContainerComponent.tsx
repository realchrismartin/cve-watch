import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import NavbarComponent from "./NavbarComponent";
import SidebarComponent from "./SidebarComponent";
import VulnerabilityListViewComponent from "./VulnerabilityListViewComponent";
import "../css/AppContainerComponent.css";
import SoftwareSearchViewComponent from "./SoftwareSearchViewComponent";
import AccountSettingsViewComponent from "./AccountSettingsViewComponent";
import AccountCreationViewComponent from "./AccountCreationViewComponent";
import {
  checkUserSessionAction,
  updateAccountSubscriptionsAction,
} from "../action/AccountAction";

type ConstructorType = {};

type PropsType = ConnectedProps<typeof connector>;

class AppContainerComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  componentDidMount() {
    return this.props
      .checkUserSession()
      .then(() => {
        if (this.props.session) {
          return this.props.updateUserSubscriptions();
        }
      })
      .catch((err: any) => {
        console.log(err);
      });
  }

  render(): any {
    let components = [
      <VulnerabilityListViewComponent />,
      <SoftwareSearchViewComponent />,
      <AccountSettingsViewComponent />,
      <AccountCreationViewComponent />,
    ];

    return (
      <div className="app-container">
        <div className="navbar-container">
          <NavbarComponent />
        </div>
        <div className="sidebar-container">
          <SidebarComponent />
        </div>
        <div className="content-container">{components[this.props.view]}</div>
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    view: state.viewReducer.view,
    session: state.accountReducer.hasSession,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    checkUserSession: () => {
      return dispatch(checkUserSessionAction());
    },
    updateUserSubscriptions: () => {
      return dispatch(updateAccountSubscriptionsAction("fakeusername")); //TODO: unhardcode this
    },
  };
}
const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(AppContainerComponent);
