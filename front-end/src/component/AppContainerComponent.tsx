import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import NavbarComponent from "./NavbarComponent";
import SidebarComponent from "./SidebarComponent";
import VulnerabilityListViewComponent from "./VulnerabilityListViewComponent";
import "../css/AppContainerComponent.css";
import SoftwareSearchViewComponent from "./SoftwareSearchViewComponent";
import AccountSettingsViewComponent from "./AccountSettingsViewComponent";
import AccountCreationViewComponent from "./AccountCreationViewComponent";
import {
  updateAccountSubscriptionsAction,
  updateUserSessionAction,
} from "../action/AccountAction";

type ConstructorType = {};

type PropsType = ConnectedProps<typeof connector>;

class AppContainerComponent extends React.Component<
  PropsType,
  ConstructorType
> {

  componentDidMount() {
    //Ensure user's session is refreshed, if one exists
    this.props
      .updateUserSession()
      .then(() => {
        this.props.updateUserSubscriptions();
      })
      .catch((err: any) => {
        console.log(err);
      });
  }

  render(): any {
    let components = [
      <AccountCreationViewComponent />,
      <VulnerabilityListViewComponent />,
      <SoftwareSearchViewComponent />,
      <AccountSettingsViewComponent />,
    ];

    return (
      <div className="app-container">
        <div className="navbar-container">
          <NavbarComponent />
        </div>
        <div className="sidebar-container">
          <SidebarComponent />
        </div>
        <div className="content-container">{components[this.props.view]}</div>
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    view: state.settingsReducer.view,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    updateUserSession: () => {
      return dispatch(updateUserSessionAction());
    },
    updateUserSubscriptions: () => {
      return dispatch(updateAccountSubscriptionsAction());
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(AppContainerComponent);
