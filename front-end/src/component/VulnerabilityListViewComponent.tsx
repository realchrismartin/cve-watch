import React from "react";
import "../css/VulnerabilityListViewComponent.css";
import { getVulnerabilitiesAction } from "../action/VulnerabilityAction";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";

type ConstructorType = {
  loading: boolean;
};

type PropsType = ConnectedProps<typeof connector>;

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;

  private observer: IntersectionObserver;

  constructor(props: PropsType) {
    super(props);
    this.state = { loading: true };
    this.loadingRef = React.createRef();
    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 1.0,
    });
  }

  checkScroll(entities: any, observer: IntersectionObserver) {
    //TODO: Re-enable
  }

  componentDidMount() {
    //TODO: parameterize
    this.props.getVulnerabilities("", 0, 10).then(() => {
      this.setState({ loading: false });
    });
  }

  render(): any {
    let vulnerabilities = [] as any[];

    if (this.props.vulnerabilities !== undefined) {
      vulnerabilities = this.props.vulnerabilities.map((it: any) => {
        return <div>{it["cve"]["CVE_data_meta"]["ID"]}</div>;
      });
    }

    let loadingCSSClass = this.state.loading
      ? "loading-indicator-on"
      : "loading-indicator-off";
    return (
      <div className="vuln-list-container">
        <div>{vulnerabilities}</div>
        <div className={loadingCSSClass} ref={this.loadingRef}>
          ...
        </div>
        <div className="vuln-list-scroll-space"> </div>
      </div>
    );
  }
}

function mapStateToProps(state: RootState) {
  return {
    vulnerabilities: state.vulnerabilityReducer.vulnerabilities,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (query: string, startAt: number, pageSize: number) => {
      return dispatch(getVulnerabilitiesAction(query, startAt, pageSize));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityListViewComponent);
