import React from "react";
import VulnerabilityListItemComponent from "./VulnerabilityListItemComponent";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import {
  clearFilterAction,
  setFilterAction,
  toggleFilterOnAction,
  toggleFilterOffAction,
  clearFiltersAction,
} from "../action/FilterAction";
import { debounce } from "lodash";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";

import "../css/VulnerabilityListViewComponent.css";
import {
  toggleSubscriptionOnAction,
  toggleSubscriptionOffAction,
} from "../action/AccountAction";

type ConstructorType = {
  loading: boolean;
  filterExpanded: boolean;
  filterSubmenuExpanded: boolean;
  filterMinLength: number;
  filterDebounceTimeout: number;
  prevMax: number;
};

type PropsType = ConnectedProps<typeof connector>;

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;
  private filterInputRef: any;
  private itemRefs: any[];

  private observer: IntersectionObserver;
  private handleApplyingFiltersAndSubscriptionsDebounced: any;

  constructor(props: PropsType) {
    super(props);
    this.state = {
      loading: false,
      filterExpanded: true,
      filterSubmenuExpanded: true,
      filterMinLength: 4,
      filterDebounceTimeout: 1000,
      prevMax: 0,
    };
    this.loadingRef = React.createRef();
    this.filterInputRef = React.createRef();
    this.itemRefs = [];
    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 0.2,
    });

    /* Add debouncer to filter apply button */
    this.handleApplyingFiltersAndSubscriptions = this.handleApplyingFiltersAndSubscriptions.bind(
      this
    );

    this.handleApplyingFiltersAndSubscriptionsDebounced = debounce(() => {
      this.handleApplyingFiltersAndSubscriptions();
    }, this.state.filterDebounceTimeout);

    this.itemRefs = this.props.vulnerabilities.map(() => {
      return React.createRef();
    });
  }
  componentDidMount() {
    //Set up an observer to watch loadingRef / trigger loading of more CVEs
    this.observer.observe(this.loadingRef);

    //Load initial CVEs
    if (
      this.props.vulnerabilities.length === 0 &&
      this.state.loading === false
    ) {
      this.setState({ loading: true });
      return this.props
        .getVulnerabilities(
          this.props.toggledFilters,
          this.props.toggledSubscriptions,
          this.props.vulnerabilities.length,
          this.props.pageSize
        )
        .then(() => {
          this.setState({ loading: false });
        })
        .catch((err: any) => {
          console.log(err);
        });
    }
  }

  /* Callback called by IntersectionObserver when scroll loading div is in viewport */
  checkScroll(entities: any[], observer: IntersectionObserver) {
    //TODO: Add a bypass if all of the records have been retrieved already (maxForFilter is reached)
    let yPos = entities[0].boundingClientRect.y;

    if (
      this.state.prevMax > yPos &&
      this.props.vulnerabilities.length > 0 &&
      !this.state.loading
    ) {
      this.setState({ loading: true });
      return this.props
        .getVulnerabilities(
          this.props.toggledFilters,
          this.props.toggledSubscriptions,
          this.props.vulnerabilities.length,
          this.props.pageSize
        )
        .then(() => {
          this.setState({ loading: false });
        })
        .catch((err: Error) => {
          console.log(err);
        });
    }

    this.setState({ prevMax: yPos });
  }

  /* Handles changing view to focus on specific CVE cards */
  handleClickItem(ref: any) {
    ref.scrollIntoView({ behavior: "smooth" });
  }

  /*Handles expanding/contracting settings pane*/
  handleExpandFilter() {
    this.state.filterExpanded
      ? this.setState({ filterExpanded: false, filterSubmenuExpanded: false })
      : this.setState({ filterExpanded: true, filterSubmenuExpanded: false });
  }

  /*Handles expanding/contracting submenu filter*/
  handleExpandFilterSubmenu() {
    this.state.filterSubmenuExpanded
      ? this.setState({ filterSubmenuExpanded: false })
      : this.setState({ filterSubmenuExpanded: true });
  }

  /* Handles adding newly entered filter strings to state */
  handleFilterChange() {
    if (this.filterInputRef !== null) {
      let newFilter = this.filterInputRef.value;

      if (newFilter.length > this.state.filterMinLength) {
        this.filterInputRef.value = "";
        this.props.setFilter(newFilter);
      }
    }
  }

  /* Handles toggling filter strings */
  handleToggleFilter(filter: string) {
    if (this.props.toggledFilters.indexOf(filter) !== -1) {
      this.props.toggleFilterOff(filter);
    } else {
      this.props.toggleFilterOn(filter);
    }
  }

  /* Handles clearing filters */
  handleClearFilters() {
    this.props.clearFilters();
  }

  /* Handles toggling subscription filter strings */
  handleToggleSubscription(subscription: string) {
    if (this.props.toggledSubscriptions.indexOf(subscription) !== -1) {
      this.props.toggleSubscriptionOff(subscription);
    } else {
      this.props.toggleSubscriptionOn(subscription);
    }
  }

  /* Handles updating store data based on applied filter and subscription filter strings */
  handleApplyingFiltersAndSubscriptions() {
    if (!this.state.loading) {
      this.setState({ loading: true });
      this.props.clearVulnerabilities().then(() => {
        this.props
          .getVulnerabilities(
            this.props.toggledFilters,
            this.props.toggledSubscriptions,
            this.props.vulnerabilities.length,
            this.props.pageSize
          )
          .then(() => {
            this.setState({ loading: false });
          })
          .catch((err: any) => {
            console.log(err);
          });
      });
    }
  }

  render(): any {
    let vulnerabilities = [] as any[];

    let vulnerabilityListFiltersCSSClass = this.state.filterSubmenuExpanded
      ? "vulnerability-list-filters-item-expanded"
      : "vulnerability-list-filters-item-collapsed";

    let vulnerabilityListFiltersBoxCSSClass = this.state.filterSubmenuExpanded
      ? "vulnerability-list-filters-expanded"
      : "vulnerability-list-filters-collapsed";

    let vulnerabilityListSettingsCSSClass = this.state.filterExpanded
      ? "vulnerability-list-settings-item-expanded"
      : "vulnerability-list-settings-item-collapsed";

    let vulnerabilityListSettingsBoxCSSClass = this.state.filterExpanded
      ? "vulnerability-list-settings-expanded"
      : "vulnerability-list-settings-collapsed";

    if (this.props.vulnerabilities !== undefined) {
      vulnerabilities = this.props.vulnerabilities.map(
        (it: any, index: number) => {
          return (
            <VulnerabilityListItemComponent
              key={"vulnerability-list-item-" + index}
              data={it}
              inputRef={(r: any) => {
                this.itemRefs[index] = r;
              }}
              onClick={() => {
                this.handleClickItem(this.itemRefs[index]);
              }}
            />
          );
        }
      );
    }

    let filters = this.props.filters.map((it: string) => {
      let toggleCheckbox = (
        <input
          className={
            "vulnerability-list-settings-checkbox " +
            vulnerabilityListFiltersCSSClass
          }
          type="checkbox"
          defaultChecked={true}
          onChange={(e) => {
            this.handleToggleFilter(it);
          }}
        ></input>
      );

      return (
        <div className={vulnerabilityListFiltersCSSClass}>
          {toggleCheckbox} {it}
        </div>
      );
    });

    let subscriptionFilters = this.props.subscriptions.map((it: string) => {
      let toggleCheckbox = (
        <input
          className={
            "vulnerability-list-settings-checkbox" +
            vulnerabilityListFiltersCSSClass
          }
          type="checkbox"
          defaultChecked={true}
          onChange={(e) => {
            this.handleToggleSubscription(it);
          }}
        ></input>
      );

      return (
        <div className={vulnerabilityListFiltersCSSClass}>
          {toggleCheckbox} {"[s] " + it}
        </div>
      );
    });

    let hideFiltersIfEmptyCSSClass =
      this.props.filters.length + this.props.subscriptions.length > 0
        ? ""
        : "vulnerability-list-filters-collapsed";

    return (
      <div className="vulnerability-list">
        <div>
          <div
            className={
              "vulnerability-list-settings " +
              vulnerabilityListSettingsBoxCSSClass
            }
          >
            <div className="vulnerability-list-settings-icon">
              <svg
                onClick={() => {
                  this.handleExpandFilter();
                }}
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 25 25"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
                />
              </svg>
            </div>
            <div
              className={
                "vulnerability-list-settings-icon " +
                vulnerabilityListSettingsCSSClass
              }
            >
              <svg
                onClick={() => {
                  this.handleExpandFilterSubmenu();
                }}
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z"
                  clip-rule="evenodd"
                />
              </svg>
            </div>
            <div
              className={
                "vulnerability-list-settings-filter" +
                vulnerabilityListSettingsCSSClass
              }
            >
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  this.handleFilterChange();
                }}
              >
                <input
                  className={vulnerabilityListSettingsCSSClass}
                  id="vulnerabilityListFilterInput"
                  ref={(inputRef) => (this.filterInputRef = inputRef)}
                  minLength={this.state.filterMinLength}
                  disabled={this.state.loading}
                />
              </form>
            </div>
            <div
              className={
                "vulnerability-list-settings-icon " +
                vulnerabilityListSettingsCSSClass
              }
            >
              <svg
                onClick={(e: any) => {
                  //TODO: these are not synchronous, this might not work every time
                  this.handleFilterChange();
                  this.handleApplyingFiltersAndSubscriptionsDebounced();
                }}
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
                />
              </svg>
            </div>
            <div
              className={
                "vulnerability-list-settings-icon " +
                vulnerabilityListSettingsCSSClass
              }
            >
              <svg
                onClick={(e: any) => {
                  this.handleClearFilters();
                }}
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
          </div>
          <div className="vulnerability-list-filter-container">
            <div
              className={
                "vulnerability-list-filters " +
                vulnerabilityListFiltersBoxCSSClass + " " + 
                hideFiltersIfEmptyCSSClass
              }
            >
              {filters}
              {subscriptionFilters}
            </div>
          </div>
          <div className="vuln-loading-container">
            <svg
              className={
                this.state.loading
                  ? "vuln-loading-indicator-on"
                  : "vuln-loading-indicator-off"
              }
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 25 25"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
              />
            </svg>
          </div>
        </div>

        <div className="vulnerability-list-content">
          {vulnerabilities}
          <div
            ref={(loadingRef) => (this.loadingRef = loadingRef)}
            className="vuln-list-scroll-space"
          >
            {" "}
          </div>
        </div>
      </div>
    );
  }
}

function sanitizeInput(input: string): string {
  return input
    .replaceAll(",", "+")
    .replaceAll(" ", "+")
    .replaceAll("'", "")
    .replaceAll('"', "");
}

function mapStateToProps(state: RootState) {
  return {
    vulnerabilities: state.vulnerabilityReducer.vulnerabilities,
    filters: state.filterReducer.filters,
    toggledFilters: state.filterReducer.toggledFilters,
    pageSize: state.settingsReducer.pageSize,
    session: state.accountReducer.hasSession,
    subscriptions: state.accountReducer.subscriptions,
    toggledSubscriptions: state.accountReducer.toggledSubscriptions,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (
      query: string[],
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      //TODO: Remove duplicate terms
      let allTerms = [...query, ...subscriptions];

      if (allTerms.length > 0) {
        terms = allTerms.reduce((val, it) => {
          return val + "+" + sanitizeInput(it);
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },

    setFilter: (filter: string) => {
      return dispatch(setFilterAction(filter));
    },

    clearFilter: (filter: string) => {
      return dispatch(clearFilterAction(filter));
    },

    clearFilters: () => {
      return dispatch(clearFiltersAction());
    },

    toggleFilterOn: (filter: string) => {
      return dispatch(toggleFilterOnAction(filter));
    },

    toggleSubscriptionOn: (filter: string) => {
      return dispatch(toggleSubscriptionOnAction(filter));
    },

    toggleFilterOff: (filter: string) => {
      return dispatch(toggleFilterOffAction(filter));
    },

    toggleSubscriptionOff: (filter: string) => {
      return dispatch(toggleSubscriptionOffAction(filter));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityListViewComponent);
