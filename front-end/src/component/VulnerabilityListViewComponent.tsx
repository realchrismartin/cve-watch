import React from "react";
import "../css/VulnerabilityListViewComponent.css";
import VulnerabilityListItemComponent from "./VulnerabilityListItemComponent";

import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { DebounceInput } from "react-debounce-input";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";

type ConstructorType = {
  loading: boolean;
  filter: string;
  filterMinLength: number;
  filterDebounceTimeout: number;
  pageSize: number;
  prevMax: number;
};

type PropsType = ConnectedProps<typeof connector>;

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;

  private observer: IntersectionObserver;

  constructor(props: PropsType) {
    super(props);
    this.state = {
      loading: true,
      filter: "",
      filterMinLength: 4,
      filterDebounceTimeout: 1000,
      pageSize: 100,
      prevMax: 0,
    };
    this.loadingRef = React.createRef();
    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 0,
    });
  }

  checkScroll(entities: any, observer: IntersectionObserver) {
    let yPos = entities[0].boundingClientRect.y;

    if (
      this.state.prevMax > yPos &&
      this.props.vulnerabilities.length > 0 &&
      !this.state.loading
    ) {
      this.setState({ loading: true });
      return this.props
        .getVulnerabilities(
          this.state.filter,
          this.props.vulnerabilities.length,
          this.state.pageSize
        )
        .then(() => {
          this.setState({ loading: false });
        });
    }

    this.setState({ prevMax: yPos });
  }

  componentDidMount() {
    if (this.props.vulnerabilities.length === 0) {
      this.setState({ loading: true });
      this.props
        .getVulnerabilities(
          this.state.filter,
          this.props.vulnerabilities.length,
          this.state.pageSize
        )
        .then(() => {
          this.setState({ loading: false });
        });
    }

    this.observer.observe(this.loadingRef);
  }

  handleFilterChange(e: any) {
    if (!this.state.loading) {
      this.setState({ filter: e.target.value });
      return this.props.clearVulnerabilities().then(() => {
        return this.props.getVulnerabilities(
          e.target.value,
          this.props.vulnerabilities.length,
          this.state.pageSize
        );
      });
    } else {
      e.target.value = this.state.filter;
    }
  }

  render(): any {
    let vulnerabilities = [] as any[];

    if (this.props.vulnerabilities !== undefined) {
      vulnerabilities = this.props.vulnerabilities.map(
        (it: any, index: number) => {
          return (
            <VulnerabilityListItemComponent
              key={"vulnerability-list-item-" + index}
              data={it}
            />
          );
        }
      );
    }

    return (
      <div className="vulnerability-list">
        <div className="vulnerability-list-settings">
          <div className="vulnerability-list-settings-pane-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 25 25"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
              />
            </svg>
          </div>
          <div className="vulnerability-list-settings-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
              />
            </svg>
          </div>
          <div className="vulnerability-list-settings-filter">
            <form
              onSubmit={(e) => {
                e.preventDefault();
              }}
            >
              <label htmlFor="vulnFilter">Filter</label>
              <DebounceInput
                minLength={this.state.filterMinLength}
                debounceTimeout={this.state.filterDebounceTimeout}
                id="vulnFilter"
                onChange={(e) => {
                  this.handleFilterChange(e);
                }}
              ></DebounceInput>
            </form>
          </div>
          <div>Clear Input Filter</div>
          <div className="vulnerability-list-settings-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          <div>Clear Subscribed Filters</div>
          <div className="vulnerability-list-settings-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        </div>

        <div className="vulnerability-list-content">{vulnerabilities}</div>
        <div
          className={
            this.state.loading
              ? "loading-indicator-on"
              : "loading-indicator-off"
          }
        >
          ...
        </div>
        <div
          ref={(loadingRef) => (this.loadingRef = loadingRef)}
          className="vuln-list-scroll-space"
        >
          {" "}
        </div>
      </div>
    );
  }
}

function mapStateToProps(state: RootState) {
  return {
    vulnerabilities: state.vulnerabilityReducer.vulnerabilities,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (query: string, startAt: number, pageSize: number) => {
      return dispatch(getVulnerabilitiesAction(query, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityListViewComponent);
