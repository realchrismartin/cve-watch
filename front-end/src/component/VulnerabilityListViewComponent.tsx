import React from "react";
import "../css/VulnerabilityListViewComponent.css";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { DebounceInput } from "react-debounce-input";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";

type ConstructorType = {
  loading: boolean;
  filter: string;
  filterMinLength: number;
  filterDebounceTimeout: number;
  pageSize: number;
  prevMax: number;
};

type PropsType = ConnectedProps<typeof connector>;

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;

  private observer: IntersectionObserver;

  constructor(props: PropsType) {
    super(props);
    this.state = {
      loading: true,
      filter: "",
      filterMinLength: 4,
      filterDebounceTimeout: 1000,
      pageSize: 100,
      prevMax: 0,
    };
    this.loadingRef = React.createRef();
    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 0,
    });
  }

  checkScroll(entities: any, observer: IntersectionObserver) {
    
    let yPos = entities[0].boundingClientRect.y;

    if (this.state.prevMax > yPos && this.props.vulnerabilities.length > 0 && !this.state.loading) {
      this.setState({loading:true});
      return this.props.getVulnerabilities(
        this.state.filter,
        this.props.vulnerabilities.length,
        this.state.pageSize
      ).then(() => {
        this.setState({loading:false});
      });
    }

    this.setState({ prevMax: yPos });
  }

  componentDidMount() {
    if (this.props.vulnerabilities.length === 0) {
      this.setState({ loading: true });
      this.props
        .getVulnerabilities(
          this.state.filter,
          this.props.vulnerabilities.length,
          this.state.pageSize
        )
        .then(() => {
          this.setState({ loading: false });
        });
    }

    this.observer.observe(this.loadingRef);
  }

  handleFilterChange(e: any) {
    if(!this.state.loading) {
      this.setState({filter:e.target.value});
      return this.props.clearVulnerabilities().then(() => {
        return this.props.getVulnerabilities(e.target.value,this.props.vulnerabilities.length,this.state.pageSize);
      })
    } else {
      console.log("loadingplswait")
      e.target.value = this.state.filter;
    }

  }

  render(): any {
    let vulnerabilities = [] as any[];

    if (this.props.vulnerabilities !== undefined) {
      vulnerabilities = this.props.vulnerabilities.map((it: any) => {
           return <div key={it["cve"]["CVE_data_meta"]["ID"]}>{it["cve"]["CVE_data_meta"]["ID"]} : {it["cve"]["description"]["description_data"][0]["value"]}</div>;
        //return <div key={it}>{it}</div>;
      });
    }

    return (
      <div className="vuln-list-container">
        <form onSubmit={(e) => { e.preventDefault() }}>
          <label htmlFor="vulnFilter">Filter</label>
          <DebounceInput
            minLength={this.state.filterMinLength}
            debounceTimeout={this.state.filterDebounceTimeout}
            id="vulnFilter"
            onChange={(e) => {
              this.handleFilterChange(e);
            }}
          ></DebounceInput>
        </form>
        <div className="vuln-list">{vulnerabilities}</div>
        <div
          className={
            this.state.loading
              ? "loading-indicator-on"
              : "loading-indicator-off"
          }
        >
          ...
        </div>
        <div
          ref={(loadingRef) => (this.loadingRef = loadingRef)}
          className="vuln-list-scroll-space"
        >
          {" "}
        </div>
      </div>
    );
  }
}

function mapStateToProps(state: RootState) {
  return {
    vulnerabilities: state.vulnerabilityReducer.vulnerabilities,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (query: string, startAt: number, pageSize: number) => {
      return dispatch(getVulnerabilitiesAction(query, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityListViewComponent);
