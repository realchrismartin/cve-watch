import React, { RefObject } from "react";
import "../css/VulnerabilityListViewComponent.css";
import VulnerabilityListItemComponent from "./VulnerabilityListItemComponent";

import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { clearFilterAction, setFilterAction } from "../action/FilterAction";

import { DebounceInput } from "react-debounce-input";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";

type ConstructorType = {
  loading: boolean;
  subscriptionFilter: string;
  filterMinLength: number;
  filterDebounceTimeout: number;
  pageSize: number;
  prevMax: number;
  itemRefs: RefObject<any>[];
};

type PropsType = ConnectedProps<typeof connector>;

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;
  private filterInputRef: any;

  private observer: IntersectionObserver;

  constructor(props: PropsType) {
    super(props);
    this.state = {
      loading: true,
      subscriptionFilter: "",
      filterMinLength: 4,
      filterDebounceTimeout: 1000,
      pageSize: 100,
      prevMax: 0,
      itemRefs: [],
    };
    this.loadingRef = React.createRef();
    this.filterInputRef = React.createRef();
    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 0,
    });
  }
  componentDidMount() {
    if (this.props.vulnerabilities.length === 0) {
      this.setState({ loading: true });
      this.props
        .getVulnerabilities(
          this.props.filter,
          this.props.vulnerabilities.length,
          this.state.pageSize
        )
        .then(() => {
          this.updateItemRefs().then(() => {
            this.setState({ loading: false });
          });
        });
    } else {
      this.setState({ loading: false });
    }
    this.observer.observe(this.loadingRef);
  }

  //TODO: Add a bypass if all of the records have been retrieved already (maxForFilter is reached)
  checkScroll(entities: any[], observer: IntersectionObserver) {
    let yPos = entities[0].boundingClientRect.y;

    if (
      this.state.prevMax > yPos &&
      this.props.vulnerabilities.length > 0 &&
      !this.state.loading
    ) {
      this.setState({ loading: true });
      return this.props
        .getVulnerabilities(
          this.props.filter,
          this.props.vulnerabilities.length,
          this.state.pageSize
        )
        .then(() => {
          this.updateItemRefs().then(() => {
            this.setState({ loading: false });
          });
        });
    }

    this.setState({ prevMax: yPos });
  }

  async updateItemRefs(): Promise<void> {
    return new Promise((resolve, reject) => {
      let newRefs = this.props.vulnerabilities.map(() => {
        return React.createRef();
      });
      this.setState({ itemRefs: newRefs });
      resolve();
    });
  }

  sanitizeInput(input: string): string {
    return input
      .replaceAll(",", "+")
      .replaceAll(" ", "+")
      .replaceAll("'", "")
      .replaceAll('"', "");
  }

  handleClickItem(index: number) {
    //let ref = this.state.itemRefs[index]; //Get a list item ref to scroll to
    //console.log(ref.current);
    //TODO: Make scrolling to items work
  }

  handleFilterClear() {
    this.props.clearFilter();
  }

  handleFilterChange(event: any) {
    let newFilter = event.target.value;

    if (!this.state.loading) {
      newFilter = this.sanitizeInput(newFilter);
      this.setState({ loading: true });

      return this.props.setFilter(newFilter).then(() => {
        return this.props.clearVulnerabilities().then(() => {
          return this.props
            .getVulnerabilities(
              this.props.filter,
              this.props.vulnerabilities.length,
              this.state.pageSize
            )
            .then(() => {
              this.updateItemRefs().then(() => {
                this.setState({ loading: false });
                event.target.value = "";
              });
            });
        });
      });
    }
  }

  render(): any {
    let vulnerabilities = [] as any[];

    if (this.props.vulnerabilities !== undefined) {
      vulnerabilities = this.props.vulnerabilities.map(
        (it: any, index: number) => {
          return (
            <VulnerabilityListItemComponent
              key={"vulnerability-list-item-" + index}
              data={it}
              ref={this.state.itemRefs[index]}
              onClick={() => {
                this.handleClickItem(index);
              }}
            />
          );
        }
      );
    }

    let filters = this.props.filter.map((it: string) => {
      return <div>{it}</div>;
    });

    let clearFilterCSSClass =
      this.props.filter.length > 0
        ? "vulnerability-list-settings-icon vulnerability-list-settings-icon-shown"
        : "vulnerability-list-settings-icon vulnerability-list-settings-icon-hidden";

    //TODO: reenable
    let clearSubscriptionFilterCSSClass =
      this.props.filter.length > 9999
        ? "vulnerability-list-settings-icon vulnerability-list-settings-icon-shown"
        : "vulnerability-list-settings-icon vulnerability-list-settings-icon-hidden";

    return (
      <div className="vulnerability-list">
        <div className="vulnerability-list-settings">
          <div className="vulnerability-list-settings-pane-icon vulnerability-list-settings-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 25 25"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
              />
            </svg>
          </div>
          <div className="vulnerability-list-settings-icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
              />
            </svg>
          </div>
          <div className="vulnerability-list-settings-filter">
            <form
              onSubmit={(e) => {
                e.preventDefault();
              }}
            >
              <DebounceInput
                inputRef={this.filterInputRef}
                minLength={this.state.filterMinLength}
                debounceTimeout={this.state.filterDebounceTimeout}
                id="vulnFilter"
                onChange={(e) => {
                  this.handleFilterChange(e);
                }}
              />
            </form>
          </div>
          <div
            className={clearFilterCSSClass}
            onClick={(e) => {
              this.handleFilterClear();
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          <div
            className={clearSubscriptionFilterCSSClass}
            onClick={(e) => {
              //TODO: Add resetting / removing applied subscription filter and/or adding it back
            }}
          ></div>
          <div className={clearSubscriptionFilterCSSClass}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          </div>
          {filters}
        </div>

        <div className="vulnerability-list-content">
          {vulnerabilities}
          <div
            ref={(loadingRef) => (this.loadingRef = loadingRef)}
            className="vuln-list-scroll-space"
          >
            {" "}
          </div>
          <div
            className={
              this.state.loading
                ? "loading-indicator-on"
                : "loading-indicator-off"
            }
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 25 25"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
              />
            </svg>
          </div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state: RootState) {
  return {
    vulnerabilities: state.vulnerabilityReducer.vulnerabilities,
    filter: state.filterReducer.filter,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (
      query: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (query.length > 0) {
        terms = query.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },

    setFilter: (filter: string) => {
      return dispatch(setFilterAction(filter));
    },

    clearFilter: () => {
      return dispatch(clearFilterAction());
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityListViewComponent);
