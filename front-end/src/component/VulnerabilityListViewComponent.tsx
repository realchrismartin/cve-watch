import axios from "axios";
import React from "react";
import "../css/VulnerabilityListViewComponent.css"

interface ConstructorType {
  vulnerabilities: any[];
  loading: boolean;
  startAt: number;
  prevY: number;
  increment : number;
}

interface PropsType {}

class VulnerabilityListViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {

  private loadingRef : any; 

  private observer : IntersectionObserver;

  constructor(props: PropsType) {
    super(props);
    this.state = {
      vulnerabilities: [],
      loading: false,
      startAt: 1, //TODO: Change back to 0
      prevY: 0,
      increment: 10
    };

    this.loadingRef = React.createRef();
    this.observer = new IntersectionObserver(this.checkScroll.bind(this),{root:null,rootMargin:"0%",threshold:1.0});
  } 
 
  checkScroll(entities : any, observer : IntersectionObserver) {
    let y = entities[0].boundingClientRect.y;

    if(this.state.prevY > y) {
      let newStart = this.state.vulnerabilities.length - 1; 

      if(newStart < 0) { newStart = 0 }
      
      newStart += 1; //TODO: Remove when fixing APIs
      this.getVulnerabilityData(newStart,this.state.increment);
      this.setState({startAt:newStart});
    }

    this.setState({prevY : y});
  }

  componentDidMount() {

    this.getVulnerabilityData(this.state.startAt, this.state.increment);
    this.observer.observe(this.loadingRef.current);
    
  }
  getVulnerabilityData(startAt: number, increment: number) {
    this.setState({ loading: true });

    axios
      .get(
      //  `https://services.nvd.nist.gov/rest/json/cves/1.0?start=${startAt}&resultsPerPage=${increment}`
          `https://jsonplaceholder.typicode.com/posts/${startAt}`
      )
      .then((res) => {
        this.setState({
          vulnerabilities: [
            ...this.state.vulnerabilities,
       //     ...res.data.result.CVE_Items
            res.data
          ],
        });
        this.setState({loading:false});
      });
  }
  render(): any {
    //let vulnerabilities = this.state.vulnerabilities.map((it) => { return <div>{it['cve']['CVE_data_meta']['ID']}</div>})
    let vulnerabilities = this.state.vulnerabilities.map((it) => { return <div>{it["title"]}</div> });
    let loadingCSSClass = this.state.loading ? "loading-indicator-on" : "loading-indicator-off"
    return (
      <div className="vuln-list-container">
        <div>{vulnerabilities}</div>
        <div className={loadingCSSClass} ref={this.loadingRef} >...</div>
        <div className="vuln-list-scroll-space">  </div>
      </div>
    );
  }
}

export default VulnerabilityListViewComponent;
