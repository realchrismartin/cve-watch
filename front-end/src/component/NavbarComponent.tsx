import React from "react";

import {
  clearAccountSubscriptionsAction,
  clearUserSessionAction,
  clearUsernameAction,
} from "../action/AccountAction";
import { logout } from "../service/AccountService";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";

import "../css/NavbarComponent.css";
import { setViewAction } from "../action/ViewAction";
import VulnerabilityControlsComponent from "./VulnerabilityControlsComponent";
import SoftwareControlsComponent from "./SoftwareControlsComponent";
type PropsType = ConnectedProps<typeof connector>;
type ConstructorType = { };

class NavbarComponent extends React.Component<PropsType, ConstructorType> {

  /* Handles logout processes */
  handleLogout() {
    return logout()
      .then(() => {
        return this.props.clearUsername().then(() => {
          return this.props.clearUserSession().then(() => {
            return this.props.clearUserSubscriptions().then(() => {
              return this.props.clearVulnerabilities().then(() => {
                return this.props.getVulnerabilities(
                  [],
                  0,this.props.pageSize
                );
              });
            });
          });
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  /* Handles changing the view to account creation if user is not logged in, or post logout */
  handleSetView(viewIndex: number) {
    this.props.setView(viewIndex);
  }

  render(): any {

    //Display appropriate control bar based on view
    let controlBars = [
      (<div></div>),
      (<VulnerabilityControlsComponent/>),
      (<SoftwareControlsComponent/>),
      (<div></div>)
    ]
    let controlBar = controlBars[this.props.view];

console.log(controlBar);

    let loginBar = (
      <div className="login-bar">
        <svg
          onClick={() => {
            this.handleSetView(0);
          }}
          className="navbar-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fillRule="evenodd"
            d="M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z"
            clipRule="evenodd"
          />
        </svg>
        {controlBar}
      </div>
    );
    let logoutBar = (
      <div className="login-bar">
        <svg
          onClick={() => {
            this.handleLogout().then(() => {
              this.handleSetView(0);
            });
          }}
          className="navbar-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fillRule="evenodd"
            d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
            clipRule="evenodd"
          />
        </svg>
        <svg
          onClick={() => {
            this.handleSetView(3);
          }}
          className="navbar-icon"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        {this.props.username}
        {controlBar}
      </div>
    );


    let navbar = this.props.session ? logoutBar : loginBar;

    return <span className="navbar">{navbar}</span>;
  }
}
function mapStateToProps(state: RootState) {
  return {
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username,
    pageSize: state.settingsReducer.pageSize,
    view: state.settingsReducer.view
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    clearUserSession: () => {
      return dispatch(clearUserSessionAction());
    },
    clearUserSubscriptions: () => {
      return dispatch(clearAccountSubscriptionsAction());
    },

    clearUsername: () => {
      return dispatch(clearUsernameAction());
    },

    getVulnerabilities: (
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (subscriptions.length > 0) {
        terms = subscriptions.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
    setView: (view: number) => {
      return dispatch(setViewAction(view));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(NavbarComponent);
