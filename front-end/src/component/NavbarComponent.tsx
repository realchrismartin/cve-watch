import React from "react";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import { setViewAction } from "../action/ViewAction";
import VulnerabilityControlsComponent from "./VulnerabilityControlsComponent";
import SoftwareControlsComponent from "./SoftwareControlsComponent";
import SVGButton from "./SVGButton";
import "../css/NavbarComponent.css";
import AccountControlsComponent from "./AccountControlsComponent";

type PropsType = ConnectedProps<typeof connector>;
type ConstructorType = {};

/* Represents the control bar for the application */
class NavbarComponent extends React.Component<PropsType, ConstructorType> {

  /* Handles changing the view to account creation if user is not logged in, or post logout */
  handleSetView(viewIndex: number) {
    this.props.setView(viewIndex);
  }

  render(): any {
    //Display appropriate control bar based on view
    let controlBars = [
      <AccountControlsComponent />,
      <VulnerabilityControlsComponent />,
      <SoftwareControlsComponent />,
      <AccountControlsComponent />,
    ];
    let controlBar = controlBars[this.props.view];

    let loginBar = (
      <div className="login-bar">
        <SVGButton
          type={0}
          onClick={() => {
            this.handleSetView(0);
          }}
          fill={"currentColor"}
        />
        {controlBar}
      </div>
    );
    let logoutBar = (
      <div className="login-bar">
        <SVGButton
          type={2}
          onClick={() => {
            this.handleSetView(3);
          }}
          viewBox={"0 0 25 25"}
          stroke={"currentColor"}
          hoverText={`Logged in as: ${this.props.username}`}
        />
        <div className="login-username">
          {this.props.username}
        </div>
        {controlBar}
      </div>
    );

    let navbar = this.props.session ? logoutBar : loginBar;

    return <span className="navbar">{navbar}</span>;
  }
}
function mapStateToProps(state: RootState) {
  return {
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username,
    pageSize: state.settingsReducer.pageSize,
    view: state.settingsReducer.view,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    
    setView: (view: number) => {
      return dispatch(setViewAction(view));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(NavbarComponent);
