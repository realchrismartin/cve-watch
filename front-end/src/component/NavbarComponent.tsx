import React from "react";

import {
  clearAccountSubscriptionsAction,
  clearUserSessionAction,
  clearUsernameAction,
} from "../action/AccountAction";
import { logout } from "../service/AccountService";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";

import "../css/NavbarComponent.css";
import { setViewAction } from "../action/ViewAction";
type PropsType = ConnectedProps<typeof connector>;
type ConstructorType = { pageSize: number };

class NavbarComponent extends React.Component<PropsType, ConstructorType> {
  constructor(props: PropsType) {
    super(props);

    this.state = {
      pageSize: 100, //TODO: Unhardcode or ensure this matches VulnerabilityListViewComponent
    };
  }

  /* Handles logout processes */
  handleLogout() {
    return logout()
      .then(() => {
        return this.props.clearUsername().then(() => {
          return this.props.clearUserSession().then(() => {
            return this.props.clearUserSubscriptions().then(() => {
              return this.props.clearVulnerabilities().then(() => {
                return this.props.getVulnerabilities(
                  [],
                  0,
                  this.state.pageSize
                );
              });
            });
          });
        });
      })
      .catch((err) => {
        console.log(err);
      });
  }

  /* Handles changing the view to account creation if user is not logged in, or post logout */
  handleSetView(viewIndex: number) {
    this.props.setView(viewIndex);
  }

  render(): any {
    let loginBar = (
      <div className="login-bar">
        <button
          type="submit"
          onClick={() => {
            this.handleSetView(0);
          }}
        >
          Log in
        </button>
      </div>
    );
    let logoutBar = (
      <div className="login-bar">
        <button
          type="submit"
          onClick={() => {
            this.handleLogout().then(() => {
              this.handleSetView(0);
            });
          }}
        >
          Log Out
        </button>
        <svg className="user-avatar-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>
        {this.props.username}
      </div>
    );

    let navbar = this.props.session ? logoutBar : loginBar;

    return <div className="navbar">{navbar}</div>;
  }
}
function mapStateToProps(state: RootState) {
  return {
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    clearUserSession: () => {
      return dispatch(clearUserSessionAction());
    },
    clearUserSubscriptions: () => {
      return dispatch(clearAccountSubscriptionsAction());
    },

    clearUsername: () => {
      return dispatch(clearUsernameAction());
    },

    getVulnerabilities: (
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (subscriptions.length > 0) {
        terms = subscriptions.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
    setView: (view: number) => {
      return dispatch(setViewAction(view));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(NavbarComponent);
