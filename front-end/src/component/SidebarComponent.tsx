import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import "../css/SidebarComponent.css";
import { changeViewAction } from "../action/ViewAction";

type ConstructorType = {
  expanded: boolean;
};

type PropsType = ConnectedProps<typeof connector>;

class SidebarComponent extends React.Component<PropsType, ConstructorType> {
  constructor(props: PropsType) {
    super(props);

    this.state = {
      expanded: false,
    };
  }

  handleChangeView(view: number) {
    this.props.changeView(view);
    this.setState({expanded:false});
  }

  handleExpandSidebar() {
    if (this.state.expanded) {
      this.setState({ expanded: false });
    } else {
      this.setState({ expanded: true });
    }
  }

  render(): any {
    let iconViewbox = "0 0 25 25";
    let sidebarClass = this.state.expanded
      ? "sidebar sidebar-expanded"
      : "sidebar sidebar-collapsed";

    return (
      <div className={sidebarClass}>
        <div className="sidebar-icon-container">
          <div
            className="sidebar-view-icon"
            onClick={() => {
              this.handleExpandSidebar();
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox={iconViewbox}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 10h16M4 14h16M4 18h16"
              />
            </svg>
          </div>
          <div className="sidebar-top-space"></div>
          <div
            className="sidebar-view-icon"
            onClick={() => {
              this.handleChangeView(0);
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox={iconViewbox}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
              />
            </svg>
          </div>
          <div
            className="sidebar-view-icon"
            onClick={() => {
              this.handleChangeView(1);
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox={iconViewbox}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <div
            className="sidebar-view-icon"
            onClick={() => {
              this.handleChangeView(2);
            }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              stroke="currentColor"
              viewBox={iconViewbox}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
              />
            </svg>
          </div>
        </div>
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    view: state.viewReducer.view,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    changeView: (view: number) => {
      dispatch(changeViewAction(view));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SidebarComponent);
