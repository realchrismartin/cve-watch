import React from "react";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import {
  clearFilterAction,
  setFilterAction,
  toggleFilterOnAction,
  toggleFilterOffAction,
  clearFiltersAction,
} from "../action/FilterAction";
import {
  toggleSubscriptionOnAction,
  toggleSubscriptionOffAction,
} from "../action/AccountAction";

import { debounce } from "lodash";
import sanitizeString from "../util/SanitizeString";

import "../css/VulnerabilityControlsComponent.css";
import SVGButton from "./SVGButton";

type PropsType = ConnectedProps<typeof connector>;

type ConstructorType = {
  loading: boolean;
  filterExpanded: boolean;
  filterMinLength: number;
  filterDebounceTimeout: number;
  filterHasUnappliedChanges: boolean;
};

/* Control bar for vulnerability view */
class VulnerabilityControlsComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private filterInputRef: any;
  private handleApplyingFiltersAndSubscriptionsDebounced: any;

  constructor(props: PropsType) {
    super(props);
    this.filterInputRef = React.createRef();
    this.state = {
      loading: false,
      filterExpanded: true,
      filterMinLength: 4,
      filterDebounceTimeout: 1000,
      filterHasUnappliedChanges: false,
    };
    /* Add debouncer to filter apply button */
    this.handleApplyingFiltersAndSubscriptions = this.handleApplyingFiltersAndSubscriptions.bind(
      this
    );
    this.handleApplyingFiltersAndSubscriptionsDebounced = debounce(() => {
      this.handleApplyingFiltersAndSubscriptions();
    }, this.state.filterDebounceTimeout);
  }
  /*Handles expanding/contracting settings pane*/
  handleExpandFilter() {
    this.state.filterExpanded
      ? this.setState({ filterExpanded: false })
      : this.setState({ filterExpanded: true });
  }

  /* Handles adding newly entered filter strings to state */
  handleFilterChange() {
    this.setState({ filterExpanded: true });

    if (this.filterInputRef !== null) {
      let newFilter = this.filterInputRef.value;

      if (newFilter.length > this.state.filterMinLength) {
        this.filterInputRef.value = "";
        this.props.setFilter(newFilter);
      }
    }

    this.setState({ filterHasUnappliedChanges: true });
  }

  /* Handles toggling filter strings */
  handleToggleFilter(filter: string) {
    if (this.props.toggledFilters.indexOf(filter) !== -1) {
      this.props.toggleFilterOff(filter);
    } else {
      this.props.toggleFilterOn(filter);
    }

    this.setState({ filterHasUnappliedChanges: true });
  }

  /* Handles clearing filters */
  handleClearFilters() {
    if (this.props.filters.length > 0) {
      this.props.clearFilters();
      this.setState({ filterHasUnappliedChanges: true });
    }
  }

  /* Handles toggling subscription filter strings */
  handleToggleSubscription(subscription: string) {
    if (this.props.toggledSubscriptions.indexOf(subscription) !== -1) {
      this.props.toggleSubscriptionOff(subscription);
    } else {
      this.props.toggleSubscriptionOn(subscription);
    }
    this.setState({ filterHasUnappliedChanges: true });
  }

  /* Handles updating store data based on applied filter and subscription filter strings */
  handleApplyingFiltersAndSubscriptions() {
    if (!this.state.loading) {
      this.setState({ loading: true, filterExpanded: false });
      this.props.clearVulnerabilities().then(() => {
        this.props
          .getVulnerabilities(
            this.props.toggledFilters,
            this.props.toggledSubscriptions,
            0,
            this.props.pageSize
          )
          .then(() => {
            this.setState({ loading: false, filterHasUnappliedChanges: false });
          })
          .catch((err: any) => {
            console.log(err);
          });
      });
    }
  }

  render() {

    let vulnerabilityControlsCSSClass = this.state.filterExpanded
      ? "vulnerability-controls-item-expanded"
      : "vulnerability-controls-item-collapsed";

    let vulnerabilityControlsBoxCSSClass = this.state.filterExpanded
      ? "vulnerability-controls-expanded"
      : "vulnerability-controls-collapsed";
    
      let hideFiltersIfEmptyCSSClass =
      this.props.filters.length + this.props.subscriptions.length > 0
        ? ""
        : "vulnerability-controls-filter-collapsed";

    let filterPendingChangesCSSClass = this.state.filterHasUnappliedChanges
      ? "filter-pending-apply"
      : "filter-applied";

    let filterContainerCSSClass = this.state.filterExpanded && this.props.filters.length + this.props.subscriptions.length > 0
      ? "vulnerability-controls-filter-container vulnerability-controls-filter-container-expanded"
      : "vulnerability-controls-filter-container vulnerability-controls-filter-container-collapsed"

    let clearFilterButtonCSSClass = this.props.filters.length > 0 ? "svg-button-icon" : "svg-button-icon vulnerability-controls-icon-hidden";

    let filters = this.props.filters.map((it: string) => {
      let toggleCheckbox = (
        <input
          className={
            "vulnerability-controls-checkbox " + vulnerabilityControlsCSSClass
          }
          type="checkbox"
          defaultChecked={true}
          onChange={(e) => {
            this.handleToggleFilter(it);
          }}
        ></input>
      );

      return (
        <div className={vulnerabilityControlsCSSClass}>
          {toggleCheckbox} {it}
        </div>
      );
    });

    let subscriptionFilters = this.props.subscriptions.map((it: string) => {
      let toggleCheckbox = (
        <input
          className={
            "vulnerability-controls-checkbox" + vulnerabilityControlsCSSClass
          }
          type="checkbox"
          defaultChecked={true}
          onChange={(e) => {
            this.handleToggleSubscription(it);
          }}
        ></input>
      );

      //Show only the friendly name for CPEs
      let value = it;
      if(it.startsWith("cpe:")) {
        value = it.split(":")[4];
      }

      return (
        <div className={vulnerabilityControlsCSSClass}>
          {toggleCheckbox} {"[w] " + value}
        </div>
      );
    });

    return (
      <div className="vulnerability-controls">
        <SVGButton
          className={this.state.loading ? "svg-button vulnerability-loading-indicator-on" : "svg-button vulnerability-loading-indicator-off"}
          type={8}
          stroke={"currentColor"}
          viewBox={"0 0 24 24"}
          hoverText={"Searching for vulnerabilities, please wait..."}
        />
        <SVGButton
          type={11}
          onClick={() => {
            this.handleExpandFilter();
          }}
          hoverText="Show/Hide filters"
          stroke={"currentColor"}
          viewBox={"0 0 24 24"}
        />
        <div>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              this.handleFilterChange();
            }}
          >
            <input
              id="vulnerabilityListFilterInput"
              ref={(inputRef) => (this.filterInputRef = inputRef)}
              minLength={this.state.filterMinLength}
              disabled={this.state.loading}
            />
          </form>
        </div>
        <div className={filterPendingChangesCSSClass}>
          <SVGButton
            type={12}
            onClick={() => {
              //TODO: these are not synchronous, this might not work every time
              this.handleFilterChange();
              this.handleApplyingFiltersAndSubscriptionsDebounced();
            }}
            hoverText={"Apply filters and search NVD"}
            stroke={"currentColor"}
            viewBox={"0 0 24 24"}
          />
        </div>

        <SVGButton
          className={clearFilterButtonCSSClass}
          type={13}
          onClick={(e: any) => {
            this.handleClearFilters();
          }}
          hoverText={"Clear filters"}
          stroke={"currentColor"}
          viewBox={"0 0 24 24"}
        />
        <div className={filterContainerCSSClass}>
          <div
            className={
              "vulnerability-controls-filter " +
              vulnerabilityControlsBoxCSSClass +
              " " +
              hideFiltersIfEmptyCSSClass
            }
          >
            {filters}
            {subscriptionFilters}
          </div>
        </div>
      </div>

    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    filters: state.filterReducer.filters,
    toggledFilters: state.filterReducer.toggledFilters,
    pageSize: state.settingsReducer.pageSize,
    session: state.accountReducer.hasSession,
    subscriptions: state.accountReducer.subscriptions,
    toggledSubscriptions: state.accountReducer.toggledSubscriptions,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getVulnerabilities: (
      query: string[],
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      //TODO: Remove duplicate terms
      let allTerms = [...query, ...subscriptions];

      if (allTerms.length > 0) {
        terms = allTerms.reduce((val, it) => {
          return val + "+" + sanitizeString(it);
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },

    setFilter: (filter: string) => {
      return dispatch(setFilterAction(filter));
    },

    clearFilter: (filter: string) => {
      return dispatch(clearFilterAction(filter));
    },

    clearFilters: () => {
      return dispatch(clearFiltersAction());
    },

    toggleFilterOn: (filter: string) => {
      return dispatch(toggleFilterOnAction(filter));
    },

    toggleSubscriptionOn: (filter: string) => {
      return dispatch(toggleSubscriptionOnAction(filter));
    },

    toggleFilterOff: (filter: string) => {
      return dispatch(toggleFilterOffAction(filter));
    },

    toggleSubscriptionOff: (filter: string) => {
      return dispatch(toggleSubscriptionOffAction(filter));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(VulnerabilityControlsComponent);
