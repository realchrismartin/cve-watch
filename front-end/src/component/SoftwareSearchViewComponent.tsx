import React from "react";
import { RootState } from "../store";
import { ConnectedProps, connect } from "react-redux";
import {
  getCPESoftwareAction,
  getRepoSoftwareAction,
} from "../action/SoftwareAction";

import "../css/SoftwareSearchViewComponent.css";
import SoftwareSearchListItemComponent from "./SoftwareSearchListItemComponent";
import SVGButton from "./SVGButton";

type ConstructorType = {
  loading: boolean;
  prevMax: number;
};
type PropsType = ConnectedProps<typeof connector>;

class SoftwareSearchViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private loadingRef: any;
  private observer: IntersectionObserver;
  private githubRepoURLRegex: RegExp;

  constructor(props: PropsType) {
    super(props);

    this.state = {
      loading: false,
      prevMax: 0,
    };

    this.githubRepoURLRegex = new RegExp(
      /^(https{0,1}:\/\/)(api){0,1}github.com\/(.*?)\/(.*?)$/
    );

    this.loadingRef = React.createRef();

    this.observer = new IntersectionObserver(this.checkScroll.bind(this), {
      root: null,
      rootMargin: "0%",
      threshold: 0.2,
    });
  }

  componentDidMount() {
    //Set up an observer to watch loadingRef / trigger loading of more CPEs
    this.observer.observe(this.loadingRef);
  }

  /* Callback called by IntersectionObserver when scroll loading div is in viewport */
  checkScroll(entities: any[], observer: IntersectionObserver) {
    //TODO: Add a bypass if all of the records have been retrieved already (maxForFilter is reached)
    let yPos = entities[0].boundingClientRect.y;

    if (
      this.state.prevMax > yPos &&
      this.props.software.length > 0 &&
      !this.state.loading
    ) {
      this.setState({ loading: true });

      let isQueryRepo = this.props.query.match(this.githubRepoURLRegex);

      if (isQueryRepo) {
        this.props
          .getRepoSoftware(
            isQueryRepo[3],
            isQueryRepo[4],
            this.props.software.length,
            this.props.pageSize
          )
          .then(() => {
            this.setState({ loading: false });
          })
          .catch((err: Error) => {
            console.log(err);
          });
      } else {
        return this.props
          .getCPESoftware(
            this.props.query,
            this.props.software.length,
            this.props.pageSize
          )
          .then(() => {
            this.setState({ loading: false });
          })
          .catch((err: Error) => {
            console.log(err);
          });
      }
    }

    this.setState({ prevMax: yPos });
  }
  render(): any {
    let softwareListItems = [];

    if (this.props.software !== undefined) {
      softwareListItems = this.props.software.map((it: any, index: number) => {
        return (
          <SoftwareSearchListItemComponent
            simple={false}
            key={"software-list-item-" + index}
            data={it}
          />
        );
      });
    }

    let softwareListEmptyMessageCSSClass =
      this.props.software.length > 0
        ? "software-list-empty-message-hide"
        : "software-list-empty-message-show";

    let softwareListEmptyMessage = (
      <span>
        <div>No software found.</div>
        <div>Try searching again.</div>
      </span>
    );

    return (
      <div>
        <div className="software-list">
          {softwareListItems}
          <SVGButton
            className={
              this.state.loading
                ? "software-loading-indicator-on"
                : "software-loading-indicator-off"
            }
            type={9}
            stroke={"currentColor"}
            viewBox={"0 0 24 24"}
            hoverText={
              "Searching for a keyword or https://github.com/repo/url, please wait..."
            }
          />
          <div className={softwareListEmptyMessageCSSClass}>
            {softwareListEmptyMessage}
          </div>
          <div
            ref={(loadingRef) => (this.loadingRef = loadingRef)}
            className="software-search-scroll-space"
          >
            {" "}
          </div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state: RootState) {
  return {
    account: state.accountReducer.account,
    software: state.softwareReducer.software,
    query: state.softwareReducer.query,
    pageSize: state.settingsReducer.pageSize,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    getCPESoftware: (query: string, startAt: number, pageSize: number) => {
      return dispatch(getCPESoftwareAction(query, startAt, pageSize));
    },

    getRepoSoftware: (
      user: string,
      repo: string,
      startAt: number,
      pageSize: number
    ) => {
      return dispatch(getRepoSoftwareAction(user, repo, startAt, pageSize));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SoftwareSearchViewComponent);
