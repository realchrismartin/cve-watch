import React from "react";
import "../css/VulnerabilityListItemComponent.css";
import SoftwareSearchListItemComponent from "./SoftwareSearchListItemComponent";
import SVGButton from "./SVGButton";

type PropsType = {
  data: any;
  onClick: any;
  inputRef: any;
};
type ComponentType = {
  expanded: boolean;
  referencesExpanded: boolean;
  affectedSoftwareExpanded: boolean;
};

class VulnerabilityListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {
  constructor(props: PropsType) {
    super(props);
    this.state = {
      expanded: false,
      referencesExpanded: false,
      affectedSoftwareExpanded: false,
    };
  }

  handleOnClick() {
    if (this.state.expanded) {
      this.setState({ expanded: false });
    } else {
      this.setState({ expanded: true });
    }

    if (this.props.onClick !== undefined) {
      this.props.onClick();
    }
  }

  /* Handle expanding or collapsing reference list */
  handleExpandReferences() {
    this.state.referencesExpanded
      ? this.setState({ referencesExpanded: false })
      : this.setState({ referencesExpanded: true });
  }

  /* Handle expanding or collapsing affected software list */
  handleExpandAffectedSoftware() {
    this.state.affectedSoftwareExpanded
      ? this.setState({ affectedSoftwareExpanded: false })
      : this.setState({ affectedSoftwareExpanded: true });
  }

  render() {
    let itemCSSClassName = this.state.expanded
      ? "vulnerability-list-item vulnerability-list-item-expanded"
      : "vulnerability-list-item vulnerability-list-item-collapsed";
    let detailCSSClassName = this.state.expanded
      ? "vulnerability-list-item-detail vulnerability-list-item-detail-expanded"
      : "vulnerability-list-item-detail vulnerability-list-item-detail-collapsed";

    let id: string;
    let score: number;
    let severity: string;
    let exploitability: string;
    let impact: string;
    let description: string;
    let references: any[];
    let software: any[];

    try {
      id = this.props.data["cve"]["CVE_data_meta"]["ID"];
    } catch (error) {
      id = "CVE-2099-9999";
    }

    try {
      score = this.props.data["impact"]["baseMetricV2"]["cvssV2"]["baseScore"];
    } catch (error) {
      score = 0;
    }

    try {
      severity = this.props.data["impact"]["baseMetricV2"]["severity"];
    } catch (error) {
      severity = "n/a";
    }

    try {
      exploitability = this.props.data["impact"]["baseMetricV2"][
        "exploitabilityScore"
      ];
    } catch (error) {
      exploitability = "n/a";
    }

    try {
      impact = this.props.data["impact"]["baseMetricV2"]["impactScore"];
    } catch (error) {
      impact = "n/a";
    }

    try {
      references = this.props.data["cve"]["references"]["reference_data"].map(
        (it: any, index: number) => {
          return (
            <div>
              <a
                key={index}
                className="vulnerability-reference-link"
                target="_blank"
                rel="noreferrer"
                href={it["url"]}
              >
                {it["name"]}
              </a>
            </div>
          );
        }
      );
    } catch (error) {
      references = [];
    }

    try {
      software = this.props.data["configurations"]["nodes"].map((it: any) => {
        return it["cpe_match"].map((it2: any) => {
          return it2["cpe23Uri"];
        });
      });

      software = software.reduce((acc: string[], it: string[]) => {
        return acc.concat(it);
      });

      software = software.map((it: string, index: number) => {
        return (
          <SoftwareSearchListItemComponent
            simple={true}
            key={"cpe-list-item-" + index}
            data={it}
          />
        );
      });
    } catch (error) {
      software = [<div></div>];
    }

    try {
      description = this.props.data["cve"]["description"][
        "description_data"
      ][0]["value"];
    } catch (error) {
      description = "";
    }

    let scoreCSS = "cvss-score cvss-score-hidden";

    if (score > 0) {
      switch (true) {
        case score > 7: {
          scoreCSS = "cvss-score cvss-score-high";
          break;
        }
        case score <= 7 && score >= 3: {
          scoreCSS = "cvss-score cvss-score-medium";
          break;
        }
        case score < 3: {
          scoreCSS = "cvss-score cvss-score-low";
          break;
        }
        default: {
          break;
        }
      }
    }

    return (
      <div className={itemCSSClassName} ref={this.props.inputRef}>
        <span className="vulnerability-list-item-id vulnerability-property">
          <span>
            <SVGButton
              type={this.state.expanded ? 4 : 3}
              stroke={"currentColor"}
              onClick={() => {
                this.handleOnClick();
              }}
              viewBox="0 0 20 20"
            />
          </span>
          <span>{id}</span>
          <span className={scoreCSS + " vulnerability-property"}>
            CVSS: {score}
          </span>
        </span>
        <div className={detailCSSClassName}>
          <div className="vulnerability-property">Severity: {severity}</div>
          <div className="vulnerability-property">
            Exploitability: {exploitability}
          </div>
          <div className="vulnerability-property">Impact: {impact}</div>
          <div className="vulnerability-description">{description}</div>
          <span className="vulnerability-list-item-id vulnerability-property">
            <span>
              <SVGButton
                type={this.state.affectedSoftwareExpanded ? 4 : 3}
                stroke={"currentColor"}
                onClick={() => {
                  this.handleExpandAffectedSoftware();
                }}
                viewBox="0 0 20 20"
              ></SVGButton>
            </span>
            <span>Affected Software</span>
          </span>
          <div
            className={
              this.state.affectedSoftwareExpanded
                ? "vulnerability-affected-software-expanded"
                : "vulnerability-affected-software-collapsed"
            }
          >
            {software}
          </div>
          <span className="vulnerability-list-item-id vulnerability-property">
            <span>
              <SVGButton
                type={this.state.referencesExpanded ? 4 : 3}
                stroke={"currentColor"}
                onClick={() => {
                  this.handleExpandReferences();
                }}
                viewBox="0 0 20 20"
              ></SVGButton>
            </span>
            <span>References</span>
          </span>
          <div
            className={
              this.state.referencesExpanded
                ? "vulnerability-references-expanded"
                : "vulnerability-references-collapsed"
            }
          >
            {references}
          </div>
        </div>
      </div>
    );
  }
}

export default VulnerabilityListItemComponent;
