import React from "react";
import "../css/VulnerabilityListItemComponent.css";

type PropsType = {
  data: any;
  onClick:any;
  inputRef:any;
};
type ComponentType = {
  expanded: boolean;
};

class VulnerabilityListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {
  constructor(props: PropsType) {
    super(props);
    this.state = {
      expanded: false,
    };
  }

  handleOnClick() {
    if (this.state.expanded) {
      this.setState({ expanded: false });
    } else {
      this.setState({ expanded: true });
    }

    if(this.props.onClick !== undefined) {
      this.props.onClick();
    }
  }

  render() {
    let itemCSSClassName = this.state.expanded
      ? "vulnerability-list-item vulnerability-list-item-expanded"
      : "vulnerability-list-item vulnerability-list-item-collapsed";
    let detailCSSClassName = this.state.expanded
      ? "vulnerability-list-item-detail vulnerability-list-item-detail-expanded"
      : "vulnerability-list-item-detail vulnerability-list-item-detail-collapsed";

    let id : string;
    let score : number;
    let severity : string;
    let description : string;
    let references : any[];
    let software : any[];

    try {
      id = this.props.data["cve"]["CVE_data_meta"]["ID"];
    } catch(error) {
      id = "CVE-2099-9999";
    }

    try {
      score = this.props.data["impact"]["baseMetricV2"]["cvssV2"]["baseScore"];
    } catch(error) {
      score = 0;
    }
 
    try {
      severity = this.props.data["impact"]["baseMetricV2"]["severity"];
    } catch(error) {
      severity = "n/a";
    }
    try {
      references = this.props.data["cve"]["references"]["reference_data"].map((it : any) => { return ""});;
    } catch(error) {
      references = [];
    }

    try {
      software = this.props.data["cve"]["configurations"]["nodes"].map((it : any) => { return ""});
    } catch (error) {
      software = [];
    }
    try {
      description = this.props.data["cve"]["description"]["description_data"][0]["value"];
    } catch(error) {
      description = "";
    }
    
    let scoreCSS = "cvss-score cvss-score-hidden";
    
    if(score > 0) {
          switch(true) {
              case(score > 7): {
                  scoreCSS = "cvss-score cvss-score-high";
                  break;
              }
              case score <= 7 && score >= 3: {
                  scoreCSS = "cvss-score cvss-score-medium";
                  break;
              }
              case score < 3: {
                  scoreCSS = "cvss-score cvss-score-low";
                  break;
              }
              default: {
                  break
              }
          }
    }

    return (
      <div
        className={itemCSSClassName}
        onClick={() => {
          this.handleOnClick();
        }}
        ref={this.props.inputRef}
      >
        <div className="vulnerability-list-item-id">
          {id}
        </div>
        <div className={scoreCSS}>CVSS: {score}</div>
        <div className={detailCSSClassName}>
          <div>
            Affects:{software}
          <div>
            Description:{description}
          </div>
          <div>
            Severity:{severity}
          </div>
          <div>
            References:{references}
          </div>
        </div>
      </div>
      </div>
    );
  }
}

export default VulnerabilityListItemComponent;
