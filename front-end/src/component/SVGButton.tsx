import React from "react";
import ReactTooltip from "react-tooltip";
import "../css/SVGButton.css";

type PropsType = {
  type: number;
  fill?: string;
  hoverText?: string;
  tooltipOffset?: any;
  tooltipPlace?: any;
  onClick?: any;
};

type ConstructorType = {};

/* Represents a SVG button */
class SVGButton extends React.Component<PropsType, ConstructorType> {
  private static buttonTypes = [
    //Login (0)
    <path d="M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z" />,

    //Logout (1)
    <path d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" />,

    //User Profile Icon (2)
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
    />,

    //Expand Button (3)
    <path
      fillRule="evenodd"
      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
      clipRule="evenodd"
    />,
    //Collapse Button (4)
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M9 5l7 7-7 7"
    />,
  ];

  private svg: any;
  private hoverTooltipRef: any;
  private handleOnClick: any;

  constructor(props: PropsType) {
    super(props);

    if (this.props.onClick) {
      this.handleOnClick = this.props.onClick.bind(this);
    } else {
      this.handleOnClick = () => {};
    }

    this.hoverTooltipRef = React.createRef();
    this.svg = this.setSVG(SVGButton.buttonTypes[this.props.type]);
  }

  showHoverTooltip() {
    if (this.props.hoverText) {
      ReactTooltip.show(this.hoverTooltipRef);
    }
  }

  hideHoverTooltip() {
    if (this.props.hoverText) {
      ReactTooltip.hide(this.hoverTooltipRef);
    }
  }

  setSVG(path: any): any {
    return (
      <svg
        className="svg-button-icon"
        onClick={() => {
          this.handleOnClick();
        }}
        onMouseEnter={() => {
          this.showHoverTooltip();
        }}
        onMouseLeave={() => {
          this.hideHoverTooltip();
        }}
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill={this.props.fill || "currentColor"}
      >
        {path}
      </svg>
    );
  }

  render() {
    let tooltipText = this.props.hoverText || "";

    let hoverTooltipData = this.props.hoverText ? (
      <span
        ref={(ref) => (this.hoverTooltipRef = ref)}
        data-tip={tooltipText}
      ></span>
    ) : (
      <span></span>
    );

    let hoverTooltipOffset = this.props.tooltipOffset
      ? this.props.tooltipOffset
      : {};

    let tooltipPlace = this.props.tooltipPlace
      ? this.props.tooltipPlace
      : "bottom";

    return (
      <div className="svg-button">
        {hoverTooltipData}
        {this.svg}
        <ReactTooltip
          className="svg-button-tooltip"
          place={tooltipPlace}
          multiline
          offset={hoverTooltipOffset}
        />
      </div>
    );
  }
}

export default SVGButton;
