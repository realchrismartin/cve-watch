import React from "react";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import SVGButton from "./SVGButton";
import {
  clearAccountSubscriptionsAction,
  clearUsernameAction,
  clearUserSessionAction,
} from "../action/AccountAction";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { logout } from "../service/AccountService";
import { setViewAction } from "../action/ViewAction";

import "../css/AccountControlsComponent.css";

type PropsType = ConnectedProps<typeof connector>;

type ConstructorType = {
  loading: boolean;
  queryMinLength: number;
  queryDebounceTimeout: number;
  prevMax: number;
};

/* Represents the account controls panel */
class AccountControlsComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  /* log out (kill server session, clear Redux stores, retrieve default list, change to main view) */
  async doLogout(): Promise<void> {
    return new Promise((resolve, reject) => {
      logout()
        .then(() => {
          return this.props.clearUsername().then(() => {
            return this.props.clearUserSession().then(() => {
              return this.props.clearUserSubscriptions().then(() => {
                return this.props.clearVulnerabilities().then(() => {
                  return this.props
                    .getVulnerabilities([], 0, this.props.pageSize)
                    .then(() => {
                      return this.props.setView(1).then(() => {
                        resolve();
                      });
                    });
                });
              });
            });
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  /* Handles request to log out */
  handleLogout(): any {
    this.doLogout().catch((err: any) => {
      console.log(err);
    });
  }

  render() {
    return (
      <div className="account-controls">
        <SVGButton
          className={this.props.session ? "svg-button-icon logout-button-shown" : "svg-button-icon logout-button-hidden"}
          type={1}
          onClick={() => {
            this.handleLogout();
          }}
          stroke={"currentColor"}
          viewBox={"0 0 24 24"}
          hoverText={"Log out"}
        />
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    pageSize: state.settingsReducer.pageSize,
    session: state.accountReducer.hasSession,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    clearUserSession: () => {
      return dispatch(clearUserSessionAction());
    },
    clearUserSubscriptions: () => {
      return dispatch(clearAccountSubscriptionsAction());
    },

    clearUsername: () => {
      return dispatch(clearUsernameAction());
    },

    getVulnerabilities: (
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (subscriptions.length > 0) {
        terms = subscriptions.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
    setView: (view: number) => {
      return dispatch(setViewAction(view));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(AccountControlsComponent);
