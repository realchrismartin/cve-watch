import React from "react";
import ReactTooltip from "react-tooltip";

import {
  updateUserSessionAction,
  updateAccountSubscriptionsAction,
  clearAccountSubscriptionsAction,
  clearUserSessionAction,
  setUsernameAction,
  clearUsernameAction,
} from "../action/AccountAction";
import { login, createAccount, logout } from "../service/AccountService";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { setViewAction } from "../action/ViewAction";

import "../css/AccountCreationViewComponent.css";

type PropsType = ConnectedProps<typeof connector>;
type ConstructorType = { pageSize: number };

/* Represents an account creation and login page view */
class AccountCreationViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private usernameInputRef: any;
  private passwordInputRef: any;
  private badLoginTooltipRef: any;
  private badCreateAccountTooltipRef: any;

  constructor(props: PropsType) {
    super(props);
    this.usernameInputRef = React.createRef();
    this.passwordInputRef = React.createRef();
    this.badLoginTooltipRef = React.createRef();
    this.badCreateAccountTooltipRef = React.createRef();

    this.state = {
      pageSize: 100, //TODO: Unhardcode or ensure this matches VulnerabilityListViewComponent
    };
  }

  /* Handle requests to log in and get a session */
  async handleLogin(username: string, password: string): Promise<void> {
    return new Promise((resolve, reject) => {
      login(username, password)
        .then(() => {
          this.props.setUsername(username).then(() => {
            this.props.updateUserSession().then(() => {
              this.props.updateUserSubscriptions(username).then(() => {
                this.props.clearVulnerabilities().then(() => {
                  this.props
                    .getVulnerabilities(
                      this.props.subscriptions,
                      0,
                      this.state.pageSize
                    )
                    .then(() => {
                      this.props.setView(1).then(() => {
                        resolve();
                      });
                    });
                });
              });
            });
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  /* Handles logout processes */
  async handleLogout(): Promise<void> {
    return new Promise((resolve, reject) => {
      return logout()
        .then(() => {
          return this.props.clearUsername().then(() => {
            return this.props.clearUserSession().then(() => {
              return this.props.clearUserSubscriptions().then(() => {
                return this.props.clearVulnerabilities().then(() => {
                  return this.props
                    .getVulnerabilities([], 0, this.state.pageSize)
                    .then(() => {
                      return this.props.setView(1).then(() => {
                        resolve();
                      });
                    });
                });
              });
            });
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  /* Handles creating a new account */
  async handleCreateAccount(username: string, password: string): Promise<void> {
    return new Promise((resolve, reject) => {
      return createAccount(username, password)
        .then(() => {
          return this.handleLogin(username, password).then(() => {
            resolve();
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  render(): any {
    let loginForm = (
      <form
        onSubmit={(e) => {
          e.preventDefault();
        }}
      >
        <p
          ref={(ref) => (this.badLoginTooltipRef = ref)}
          data-tip="Login failed. Check to ensure the provided username and password are correct."
        ></p>
        <p
          ref={(ref) => (this.badCreateAccountTooltipRef = ref)}
          data-tip="An account can't be created, a user with this username may already exist."
        ></p>
        <label htmlFor="usernameInput">Username</label>
        <input
          name="usernameInput"
          type="normal"
          ref={(r) => {
            this.usernameInputRef = r;
          }}
        ></input>
        <label htmlFor="passwordInput">Password</label>
        <input
          name="passwordInput"
          type="password"
          ref={(r) => {
            this.passwordInputRef = r;
          }}
        ></input>
        <button
          type="submit"
          onClick={() => {
            this.handleCreateAccount(
              this.usernameInputRef.value,
              this.passwordInputRef.value
            ).catch((err) => {
              ReactTooltip.show(this.badCreateAccountTooltipRef);
              console.log(err);
            });
          }}
        >
          Create Account
        </button>
        <button
          type="submit"
          onClick={() => {
            this.handleLogin(
              this.usernameInputRef.value,
             this.passwordInputRef.value
            ).catch((err) => {
              ReactTooltip.show(this.badLoginTooltipRef);
              console.log(err);
            });
          }}
        >
          Log In
        </button>
      </form>
    );
    let logoutForm = (
      <div>
        Logged in as: {this.props.username}
        <button
          type="submit"
          onClick={() => {
            this.handleLogout().catch((err) => {
              console.log(err);
            });
          }}
        >
          Log Out
        </button>
      </div>
    );

    let tooltips = (
      <div className="login-tooltips">
        <ReactTooltip className="login-tooltip" offset={{top:10}} />
      </div>
    );

    let shown = this.props.session ? logoutForm : loginForm;

    return (
      <div>
        {tooltips}
        {shown}
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username,
    subscriptions: state.accountReducer.subscriptions,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    updateUserSession: () => {
      return dispatch(updateUserSessionAction());
    },

    clearUserSession: () => {
      return dispatch(clearUserSessionAction());
    },

    updateUserSubscriptions: (username: string) => {
      return dispatch(updateAccountSubscriptionsAction(username));
    },

    clearUserSubscriptions: () => {
      return dispatch(clearAccountSubscriptionsAction());
    },

    setUsername: (username: string) => {
      return dispatch(setUsernameAction(username));
    },

    clearUsername: () => {
      return dispatch(clearUsernameAction());
    },

    getVulnerabilities: (
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (subscriptions.length > 0) {
        terms = subscriptions.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
    setView: (viewIndex: number) => {
      return dispatch(setViewAction(viewIndex));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(AccountCreationViewComponent);
