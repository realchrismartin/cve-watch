import React from "react";
import ReactTooltip from "react-tooltip";

import {
  updateUserSessionAction,
  updateAccountSubscriptionsAction,
  clearAccountSubscriptionsAction,
  clearUserSessionAction,
  setUsernameAction,
  clearUsernameAction,
} from "../action/AccountAction";
import { login, createAccount, logout } from "../service/AccountService";
import { RootState } from "../store";
import { connect, ConnectedProps } from "react-redux";
import {
  clearVulnerabilitiesAction,
  getVulnerabilitiesAction,
} from "../action/VulnerabilityAction";
import { setViewAction } from "../action/ViewAction";

import "../css/AccountCreationViewComponent.css";

type PropsType = ConnectedProps<typeof connector>;
type ConstructorType = {};

/* Represents an account creation and login page view */
class AccountCreationViewComponent extends React.Component<
  PropsType,
  ConstructorType
> {
  private usernameInputRef: any;
  private passwordInputRef: any;
  private badLoginServerErrorTooltipRef: any;
  private badCreateAccountServerErrorTooltipRef: any;
  private badCreateAccountPoorComplexityTooltipRef: any;

  private tooltips: any[];

  constructor(props: PropsType) {
    super(props);

    this.tooltips = [];
    this.usernameInputRef = React.createRef();
    this.tooltips.push(this.usernameInputRef);

    this.passwordInputRef = React.createRef();
    this.tooltips.push(this.passwordInputRef);

    this.badLoginServerErrorTooltipRef = React.createRef();
    this.tooltips.push(this.badLoginServerErrorTooltipRef);

    this.badCreateAccountServerErrorTooltipRef = React.createRef();
    this.tooltips.push(this.badCreateAccountServerErrorTooltipRef);

    this.badCreateAccountPoorComplexityTooltipRef = React.createRef();
    this.tooltips.push(this.badCreateAccountPoorComplexityTooltipRef);
  }

  /* log in and get a session */
  async doLogin(username: string, password: string): Promise<void> {
    return new Promise((resolve, reject) => {
      login(username, password)
        .then(() => {
          this.props.setUsername(username).then(() => {
            this.props.updateUserSession().then(() => {
              this.props.updateUserSubscriptions(username).then(() => {
                this.props.clearVulnerabilities().then(() => {
                  this.props
                    .getVulnerabilities(
                      this.props.subscriptions,
                      0,
                      this.props.pageSize
                    )
                    .then(() => {
                      this.props.setView(1).then(() => {
                        resolve();
                      });
                    });
                });
              });
            });
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  /* log out (kill server session, clear Redux stores, retrieve default list, change to main view) */
  async doLogout(): Promise<void> {
    return new Promise((resolve, reject) => {
      logout()
        .then(() => {
          this.props.clearUsername().then(() => {
            this.props.clearUserSession().then(() => {
              this.props.clearUserSubscriptions().then(() => {
                this.props.clearVulnerabilities().then(() => {
                  this.props
                    .getVulnerabilities([], 0, this.props.pageSize)
                    .then(() => {
                      this.props.setView(1).then(() => {
                        resolve();
                      });
                    });
                });
              });
            });
          });
        })
        .catch((err) => {
          reject(err);
        });
    });
  }

  /* create an account, then log in */
  async doCreate(username : string, password : string): Promise<void> {
    return new Promise((resolve, reject) => {
      createAccount(username,password)
        .then(() => {
            resolve();
        })
        .catch((err: any) => {
          reject(err);
        });
    });
  }

  /* validate account input fields versus complexity requirements */
  async validateAccountInputs(username : string, password : string) : Promise<boolean> {
    return new Promise((resolve,reject) => {
      
      try {
        let usernameSuitable = username.match(this.props.passwordComplexityRegExp);
        let passwordSuitable = password.match(this.props.passwordComplexityRegExp);
      
      if(usernameSuitable && passwordSuitable) {
        console.log("yes");
        resolve(true);
      } else {
        resolve(false);
      }
    } catch(err) {
      reject(err);
    }
    });
  }
 
  /* Hides all ref tooltips */
  hideAllTooltips(): void {
    this.tooltips.map((it : any) => { return ReactTooltip.hide(it)});
  }

  /* Shows a single tooltip */
  showOneTooltip(ref : any) {
    this.hideAllTooltips();
    ReactTooltip.show(ref);
    setTimeout(() => {
      ReactTooltip.hide(ref);
    },this.props.tooltipTime);
  }

  /* Handles request to create an account */
  handleCreateAccount(): any {
    this.validateAccountInputs(this.usernameInputRef.value,this.passwordInputRef.value).then((valid : boolean) => {
      if(!valid) {
        this.showOneTooltip(this.badCreateAccountPoorComplexityTooltipRef);
      } else {
        this.doCreate(this.usernameInputRef.value,this.passwordInputRef.value).then(() => {
          this.doLogin(this.usernameInputRef.value,this.passwordInputRef.value)
        }).catch((err:any) => {
          this.showOneTooltip(this.badCreateAccountServerErrorTooltipRef);
          console.log(err);
        });
      }
    }).catch((err : any) => {
      console.log(err);
    });
  }

  /* Handles request to log in */
  handleLogin(): any {
    this.validateAccountInputs(this.usernameInputRef.value,this.passwordInputRef.value).then((valid : boolean) => {
      if(!valid) {
        this.showOneTooltip(this.badCreateAccountPoorComplexityTooltipRef);
      } else {
        this.doLogin(this.usernameInputRef.value,this.passwordInputRef.value).catch((err:any) => {
          this.showOneTooltip(this.badLoginServerErrorTooltipRef);
          console.log(err);
        });
      }
    }).catch((err : any) => {
      console.log(err);
    });
  };

  /* Handles request to log out */
  handleLogout(): any {}

  render(): any {
    let loginForm = (
      <div className="account-login-form">
        <form
          onSubmit={(e) => {
            e.preventDefault();
          }}
        >
          <p
            ref={(ref) => (this.badLoginServerErrorTooltipRef = ref)}
            data-tip={`${this.props.badLoginServerErrorTooltipText}`}
          ></p>
          <p
            ref={(ref) => (this.badCreateAccountServerErrorTooltipRef = ref)}
            data-tip={`${this.props.badCreateAccountServerErrorTooltipText}`}
          ></p>
          <p
            ref={(ref) => (this.badCreateAccountPoorComplexityTooltipRef = ref)}
            data-tip={`${this.props.usernameComplexityText} <br> ${this.props.passwordComplexityText}`}
          ></p>

          <div className="account-creation-form-message"></div>
          <label htmlFor="usernameInput">Username</label>
          <input
            className="account-creation-input-field"
            name="usernameInput"
            type="normal"
            ref={(r) => {
              this.usernameInputRef = r;
            }}
          ></input>
          <label htmlFor="passwordInput">Password</label>
          <input
            className="account-creation-input-field"
            name="passwordInput"
            type="password"
            ref={(r) => {
              this.passwordInputRef = r;
            }}
          ></input>
          <button
            className="account-creation-form-button"
            type="submit"
            onClick={() => {
              this.handleCreateAccount();
            }}
          >
            Create Account
          </button>
          <button
            className="account-creation-form-button"
            type="submit"
            onClick={() => {
              this.handleLogin();
            }}
          >
            Log In
          </button>
        </form>
      </div>
    );
    let logoutForm = (
      <div className="logout-form">
        <div className="account-creation-form-message">
          Logged in as: {this.props.username}
        </div>
        <button
          className="account-creation-form-button"
          type="submit"
          onClick={() => {
            this.handleLogout();
          }}
        >
          Log Out
        </button>
      </div>
    );

    let accountForm = this.props.session ? logoutForm : loginForm;

    return (
      <div className="account-creation-view">
        <div className="login-tooltips">
          <ReactTooltip className="login-tooltip" place="right" multiline offset={{ top: -30, left:100 }} />
        </div>
        <div className="account-creation-form">{accountForm}</div>
      </div>
    );
  }
}
function mapStateToProps(state: RootState) {
  return {
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username,
    subscriptions: state.accountReducer.subscriptions,
    pageSize: state.settingsReducer.pageSize,
    tooltipTime: state.settingsReducer.tooltipTime,
    badLoginServerErrorTooltipText: state.settingsReducer.badLoginServerErrorTooltipText,
    badCreateAccountServerErrorTooltipText: state.settingsReducer.badCreateAccountServerErrorTooltipText,
    usernameComplexityText: state.settingsReducer.usernameComplexityText,
    passwordComplexityText: state.settingsReducer.passwordComplexityText,
    usernameComplexityRegExp: state.settingsReducer.usernameComplexityRegExp,
    passwordComplexityRegExp: state.settingsReducer.passwordComplexityRegExp
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    updateUserSession: () => {
      return dispatch(updateUserSessionAction());
    },

    clearUserSession: () => {
      return dispatch(clearUserSessionAction());
    },

    updateUserSubscriptions: (username: string) => {
      return dispatch(updateAccountSubscriptionsAction(username));
    },

    clearUserSubscriptions: () => {
      return dispatch(clearAccountSubscriptionsAction());
    },

    setUsername: (username: string) => {
      return dispatch(setUsernameAction(username));
    },

    clearUsername: () => {
      return dispatch(clearUsernameAction());
    },

    getVulnerabilities: (
      subscriptions: string[],
      startAt: number,
      pageSize: number
    ) => {
      let terms = "";

      if (subscriptions.length > 0) {
        terms = subscriptions.reduce((val, it) => {
          return val + "+" + it;
        });
      }

      return dispatch(getVulnerabilitiesAction(terms, startAt, pageSize));
    },

    clearVulnerabilities: () => {
      return dispatch(clearVulnerabilitiesAction());
    },
    setView: (viewIndex: number) => {
      return dispatch(setViewAction(viewIndex));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(AccountCreationViewComponent);
