import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import "../css/SoftwareSearchListItemComponent.css";
import {
  subscribeToSoftwareAction,
  unsubscribeFromSoftwareAction,
} from "../action/AccountAction";

type OwnProps = { data: any; simple: boolean };
type PropsType = ConnectedProps<typeof connector> & OwnProps;
type ComponentType = {};

/* Represents a software or dependency that can be subscribed to */
/* Input data can be either a CPE record or a simple string */
class SoftwareSearchListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {

  handleSubscribe(subscription: string, subscribe: boolean) {
    subscribe
      ? this.props.subscribeTo(subscription)
      : this.props.unsubscribeFrom(subscription);
  }

  render() {
    let title = "";
    let cpeURI = "";
    

    //Either use the entire data object (simple string), or CPE title if available
    try {
      title = this.props.data;
      title  = this.props.data["titles"][0]["title"];
    } catch(err) {}
    try {
      cpeURI = this.props.data["cpe23Uri"];
    } catch(err) {}

    let subscribed = this.props.subscriptions.indexOf(title); //TODO: This will almost always still show the button, change this

    let button = <div></div>;

    if (this.props.session && subscribed === -1) {
      button = (
        <button
          onClick={(e) => {
            this.handleSubscribe(title, true);
          }}
        >
          Subscribe
        </button>
      );
    } else {
      button = (
        <button
          onClick={(e) => {
            this.handleSubscribe(title, false);
          }}
        >
          Unsubscribe
        </button>
      );
    }

    let simpleContent = (
      <span>
        <div>{title}</div>
        <div>{button}</div>
      </span>
    );
    let complexContent = (
      <span>
        <div>{title}</div>
        <div>{cpeURI}</div>
        <div>{button}</div>
      </span>
    );

    let content = this.props.simple ? simpleContent : complexContent;

    let className = this.props.simple
      ? "software-search-list-item software-search-list-item-simple"
      : "software-search-list-item software-search-list-item-complex";

    return <div className={className}>{content}</div>;
  }
}

function mapStateToProps(state: RootState) {
  return {
    subscriptions: state.accountReducer.subscriptions,
    session: state.accountReducer.hasSession,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    subscribeTo(subscription: string) {
      return dispatch(subscribeToSoftwareAction(subscription));
    },
    unsubscribeFrom(subscription: string) {
      return dispatch(unsubscribeFromSoftwareAction(subscription));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SoftwareSearchListItemComponent);
