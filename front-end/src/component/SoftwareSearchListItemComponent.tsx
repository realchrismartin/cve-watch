import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import "../css/SoftwareSearchListItemComponent.css";
import {
  subscribeToSoftwareAction,
  unsubscribeFromSoftwareAction,
} from "../action/AccountAction";

type OwnProps = { data: any; simple: boolean };
type PropsType = ConnectedProps<typeof connector> & OwnProps;
type ComponentType = {};

/* Represents a software or dependency that can be subscribed to */
/* Input data can be either a CPE record or a simple string */
class SoftwareSearchListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {
  handleSubscribe(subscription: string, subscribe: boolean) {
    if (subscribe) {
      this.props.subscribeTo(subscription).catch((err: any) => {
        console.log(err);
      });
    } else {
      this.props.unsubscribeFrom(subscription).catch((err: any) => {
        console.log(err);
      });
    }
  }

  render() {
    let title = "";
    let cpeURI = "";

    //Either use the entire data object (simple string), or CPE title if available
    try {
      title = this.props.data;
      title = this.props.data["titles"][0]["title"];
      title = title.split(" ")[0];
    } catch (err) {}
    try {
      cpeURI = this.props.data["cpe23Uri"];
    } catch (err) {}

    let subscribed = this.props.subscriptions.indexOf(title); //TODO: This will almost always still show the button, change this

    let button = <div></div>;

    if (this.props.session && subscribed === -1) {
      button = (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="software-search-list-item-button-icon"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          onClick={() => {
            this.handleSubscribe(title, true);
          }}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
          />
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
          />
        </svg>
      );
    } else if (this.props.session && subscribed >= 0) {
      button = (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="software-search-list-item-button-icon"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          onClick={() => {
            this.handleSubscribe(title, false);
          }}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"
          />
        </svg>
      );
    }

    let simpleContent = (
      <span>
        <span className="software-search-list-item-subscribe-button">
          {button}
        </span>
        <span>{title}</span>
      </span>
    );

    let complexContent = (
      <span>
        <span className="software-search-list-item-subscribe-button">
          {button}
        </span>
        <span>{title}</span>
        <span>{cpeURI}</span>
      </span>
    );

    let content = this.props.simple ? simpleContent : complexContent;

    let className = this.props.simple
      ? "software-search-list-item software-search-list-item-simple"
      : "software-search-list-item software-search-list-item-complex";

    return <div className={className}>{content}</div>;
  }
}

function mapStateToProps(state: RootState) {
  return {
    subscriptions: state.accountReducer.subscriptions,
    session: state.accountReducer.hasSession,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    subscribeTo(subscription: string) {
      return dispatch(subscribeToSoftwareAction(subscription));
    },
    unsubscribeFrom(subscription: string) {
      return dispatch(unsubscribeFromSoftwareAction(subscription));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SoftwareSearchListItemComponent);
