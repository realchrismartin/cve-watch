import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store"
import "../css/SoftwareSearchListItemComponent.css";
import { subscribeToSoftwareAction, unsubscribeFromSoftwareAction } from "../action/AccountAction";

type OwnProps = {data: any, simple: boolean};
type PropsType = ConnectedProps<typeof connector> & OwnProps;
type ComponentType = {};

class SoftwareSearchListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {

  handleClick(username : string, subscription : string, subscribe : boolean) {
    subscribe ? this.props.subscribeTo( subscription) : this.props.unsubscribeFrom(subscription);
  }

  render() {
   let title = this.props.data["titles"][0]["title"]
   let cpeURI = this.props.data["cpe23Uri"]
  
   let subscribed = this.props.subscriptions.indexOf(title); //TODO: This will almost always still show the button, change this
   console.log(subscribed);

   let button = <div></div>

   if(this.props.session && subscribed === -1) {
     //TODO: Change handleClick to use data other than title (or sanitize title)
     button = <div><button onClick={(e) => { this.handleClick(this.props.username,title,true) }}>Subscribe</button></div>
   } else {
     button = <div><button onClick={(e) => { this.handleClick(this.props.username,title,false) }}>Unsubscribe</button></div>
   }

   let simpleContent =  (<div>{title}{button}</div>);
   let complexContent =  (<div><div>{title}</div> <div>{cpeURI}</div><div>{button}</div></div>);
  
    let content = this.props.simple ? simpleContent : complexContent;

    return <div className="software-search-list-item">{content}</div>
     
  }
}

function mapStateToProps(state: RootState) {
  return {
    subscriptions: state.accountReducer.subscriptions,
    session: state.accountReducer.hasSession,
    username: state.accountReducer.username
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    subscribeTo(subscription : string) {
      return dispatch(subscribeToSoftwareAction(subscription));
    },
    unsubscribeFrom(subscription : string) {
      return dispatch(unsubscribeFromSoftwareAction(subscription));
    }
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SoftwareSearchListItemComponent);
