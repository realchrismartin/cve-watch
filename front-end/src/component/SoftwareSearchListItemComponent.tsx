import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../store";
import "../css/SoftwareSearchListItemComponent.css";
import {
  subscribeToSoftwareAction,
  unsubscribeFromSoftwareAction,
} from "../action/AccountAction";
import SVGButton from "./SVGButton";

type OwnProps = { data: any; simple: boolean };
type PropsType = ConnectedProps<typeof connector> & OwnProps;
type ComponentType = {};

/* Represents a software or dependency that can be subscribed to */
/* Input data can be either a CPE record or a simple string */
class SoftwareSearchListItemComponent extends React.Component<
  PropsType,
  ComponentType
> {
  handleSubscribe(subscription: string, subscribe: boolean) {
    if (subscribe) {
      this.props.subscribeTo(subscription).catch((err: any) => {
        console.log(err);
      });
    } else {
      this.props.unsubscribeFrom(subscription).catch((err: any) => {
        console.log(err);
      });
    }
  }

  render() {
    let title = "";
    let cpeURI = "";

    //Either use the entire data object (simple string), or CPE title if available
    try {
      title = this.props.data;
      title = this.props.data["titles"][0]["title"];
      title = title.split(" ")[0];
    } catch (err) {}
    try {
      cpeURI = this.props.data["cpe23Uri"];
    } catch (err) {}

    let subscribed = this.props.subscriptions.indexOf(title);

    let button = (<div></div>);

    let watchButton = (
        <SVGButton
        type={subscribed > -1 ? 6 : 5}
        stroke={"currentColor"}
        fill={"none"}
        hoverText={(subscribed > -1 ? "Unwatch" : "Watch") + " this software"}
        viewBox={"0 0 24 24"}
          onClick={() => {
            this.handleSubscribe(title, subscribed > -1 ? false : true);
          }}
        />);

    if (this.props.session) {
      button = watchButton;
    }

    let simpleContent = (
      <span>
        <span className="software-search-list-item-subscribe-button">
          {button}
        </span>
        <span>{title}</span>
      </span>
    );

    let complexContent = (
      <span>
        <span className="software-search-list-item-subscribe-button">
          {button}
        </span>
        <span>{title}</span>
        <span>{cpeURI}</span>
      </span>
    );

    let content = this.props.simple ? simpleContent : complexContent;

    let className = this.props.simple
      ? "software-search-list-item software-search-list-item-simple"
      : "software-search-list-item software-search-list-item-complex";

    return <div className={className}>{content}</div>;
  }
}

function mapStateToProps(state: RootState) {
  return {
    subscriptions: state.accountReducer.subscriptions,
    session: state.accountReducer.hasSession,
  };
}

function mapDispatchToProps(dispatch: any) {
  return {
    subscribeTo(subscription: string) {
      return dispatch(subscribeToSoftwareAction(subscription));
    },
    unsubscribeFrom(subscription: string) {
      return dispatch(unsubscribeFromSoftwareAction(subscription));
    },
  };
}

const connector = connect(mapStateToProps, mapDispatchToProps);
export default connector(SoftwareSearchListItemComponent);
