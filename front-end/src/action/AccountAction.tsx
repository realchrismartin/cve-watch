import {
  getUserSession,
  getAccountSubscriptions,
  addSubscription,
} from "../service/AccountService";
import { AppThunk } from "../type/Action";

/*
  Action which clears the user's session in the Redux store
*/
export const clearUserSessionAction = (): AppThunk => async (dispatch) => {
  return dispatch({type:"CLEAR_ACCOUNT_SESSION"});
}

/*
Action which sets the user's username
*/
export const setUsernameAction = (username: string): AppThunk => async (dispatch) => {
  return dispatch({type:"SET_USERNAME",username:username});
}
/*
Action which clears the user's username
*/
export const clearUsernameAction = (): AppThunk => async (dispatch) => {
  return dispatch({type:"CLEAR_USERNAME"});
}

/*
  Action which gets the status of the user's session (i.e. whether session cookie still valid) and updates Redux store accordingly
*/
export const updateUserSessionAction = (): AppThunk => async (dispatch) => {
  return getUserSession()
    .then((res: boolean) => {
      if (res) {
        return dispatch({ type: "SET_ACCOUNT_SESSION" });
      } else {
        return dispatch({ type: "CLEAR_ACCOUNT_SESSION" });
      }
    })
    .catch((err) => {
      console.log(err);
    });
};

/*
Action which subscribes the user to a specific item
*/
export const subscribeToSoftwareAction = (software:string): AppThunk => async (
  dispatch
) => {
  return addSubscription("fakeusername",software).then(() => {
      return getAccountSubscriptions("fakeusername").then((res) => {
        return dispatch({
          type: "SET_ACCOUNT_SUBSCRIPTIONS",
          subscriptions: [...res.data.subscriptions],
        });
      }).catch((err) => {
        console.log(err);
      });
  }).catch((err) => {
    console.log(err);
  })
}
/*
  Action which gets the latest state of the user's account subscriptions from the server
*/
export const updateAccountSubscriptionsAction = (): AppThunk => async (
  dispatch
) => {
  //TODO: remove hardcoding
  return getAccountSubscriptions("fakeusername")
    .then((res) => {
      return dispatch({
        type: "SET_ACCOUNT_SUBSCRIPTIONS",
        subscriptions: [...res.data.subscriptions],
      });
    })
    .catch((err) => {
      console.log(err);
      return dispatch({ type: "SET_ACCOUNT_SUBSCRIPTIONS", subscriptions: [] });
    });
};

/* 
  Action which clears user's account subscriptions
 */
export const clearAccountSubscriptionsAction = (): AppThunk => async (
  dispatch
) => {
  return dispatch({ type: "SET_ACCOUNT_SUBSCRIPTIONS", subscriptions: [] });
};

/*Action which toggles a subscription filter on */
export const toggleSubscriptionOnAction = (
  subscription: string
): AppThunk => async (dispatch) => {
  return dispatch({
    type: "TOGGLE_SUBSCRIPTION_ON",
    subscription: subscription,
  });
};

/*Action which toggles a subscription filter off */
export const toggleSubscriptionOffAction = (
  subscription: string
): AppThunk => async (dispatch) => {
  return dispatch({
    type: "TOGGLE_SUBSCRIPTION_OFF",
    subscription: subscription,
  });
};
