import express, { Router } from "express";
import IRouter from "./IRouter";
import axios from "axios";

enum RequirementsFiles {
    Python = "requirements.txt",
    NodeJS = "package.json"
}

class TestRouter implements IRouter {

    router : Router;
    reqParams : Object;

    constructor(app : express.Application, route : string) {
        this.router = express.Router();
        app.use(route,this.router);

        //Set up routes
        this.router.get("/:user/:name",this.testRoute);

        //Set up default request parameters
        //TODO: Set this to not use a hardcoded token ;3
        this.reqParams = {
            headers: {
                "Authorization": "Token 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"
            }
        }
    }

    testRoute = async(req : express.Request, res : express.Response) => {
        let repoName = req.params.name;
        let user = req.params.user;
        
        axios.get("https://api.github.com/repos/" + user + "/" + repoName + "/commits",this.reqParams).then((commitRes) => {
            let commitResBody = commitRes.data;
            let treeSha = commitResBody[0]["commit"]["tree"]["sha"];
            
            //NOTE: May fail if recursion is too deep, add handling for pagination (?)
            axios.get("https://api.github.com/repos/" + user + "/" + repoName + "/git/trees/" + treeSha + "?recursive=true",this.reqParams).then((treeRes) => {

                let fileList = treeRes.data["tree"];

                Promise.all(
                   fileList.filter((fileEntry : any) => {
                       let fileName = fileEntry["path"].split("/").pop();
                       return Object.values(RequirementsFiles).includes(fileName);
                   }).map((fileEntry : any) => { 
                       return new Promise((resolve,reject) => {
                            axios.get(fileEntry.url,this.reqParams).then((res) => {
                                resolve(res.data);
                            }).catch((err) => { reject(err)});
                       });
                   })
                ).then((reqFiles : any[]) => {
                    
                    Promise.all(reqFiles.map((fileEntry : any) => {
                        return new Promise((resolve,reject) => {
                            resolve(Buffer.from(fileEntry["content"],"base64").toString("utf-8"));
                        });
                    })).then((rawFiles) => {
                        res.send({dependencies:rawFiles});
                    }).catch((err) =>  console.log(err));
                }).catch((err) => console.log(err));
            }).catch((err) => console.log(err));
        }).catch((err) => console.log(err));

    }
}

export default TestRouter;