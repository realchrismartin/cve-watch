import express, { Router } from "express";
import IRouter from "./IRouter";
import axios from "axios";
import IReqFileParser from "./IReqFileParser";
import PythonReqFileParser from "./PythonReqFileParser";
import NodeReqFileParser from "./NodeReqFileParser";

class TestRouter implements IRouter {

    router : Router;
    reqParams : Object;
    parsers : Map<RegExp,IReqFileParser>;

    constructor(app : express.Application, route : string) {
        this.router = express.Router();
        app.use(route,this.router);

        //Set up routes
        this.router.get("/:user/:name",this.testRoute);

        //Set up default request parameters
        //TODO: Set this to not use a hardcoded token ;3
        this.reqParams = {
            headers: {
                "Authorization": "Token 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"
            }
        }

        //Set up RegExp -> Parser mappings
        this.parsers = new Map<RegExp,IReqFileParser>();
        this.parsers.set(new RegExp(".*?requirements/.*?.txt"),new PythonReqFileParser());
        this.parsers.set(new RegExp(".*?package.json"),new NodeReqFileParser());
    }

    testRoute = async(req : express.Request, res : express.Response) => {
        let repoName = req.params.name;
        let user = req.params.user;
        
        axios.get("https://api.github.com/repos/" + user + "/" + repoName + "/commits",this.reqParams).then((commitRes) => {
            let commitResBody = commitRes.data;
            let treeSha = commitResBody[0]["commit"]["tree"]["sha"];
            
            //NOTE: May fail if recursion is too deep, add handling for pagination (?)
            axios.get("https://api.github.com/repos/" + user + "/" + repoName + "/git/trees/" + treeSha + "?recursive=true",this.reqParams).then((treeRes) => {

                let fileList = treeRes.data["tree"];

                Promise.all(
                   fileList.filter((fileEntry : any) => {
                       let parsers = Array.from(this.parsers.keys()).filter((it : RegExp) => { 
                            return fileEntry["path"].match(it);
                       });
                       return parsers.length > 0; //At least one matching parser exists
                   }).map((fileEntry : any) => { 
                       return new Promise((resolve,reject) => {
                            axios.get(fileEntry.url,this.reqParams).then((res) => {
                                resolve({path:fileEntry.path,data:res.data});
                            }).catch((err) => { reject(err)});
                       });
                   })
                ).then((reqFiles : any[]) => {
                    
                    Promise.all(reqFiles.map((fileEntry : any) => {
                        return new Promise((resolve,reject) => {
                            let fileName = fileEntry.path.split("/").pop();
                            let content = Buffer.from(fileEntry.data.content,"base64").toString("utf-8"); 
                            resolve({path:fileEntry.path,fileName:fileName,content:content});
                        });
                    })).then((reqFiles) => {
                        Promise.all(reqFiles.map((fileEntry : any) => {
                            return new Promise((resolve,reject) => {
                               let fileName = fileEntry.fileName;
                               let path = fileEntry.path;
                               let parsers = Array.from(this.parsers.keys()).filter((it : RegExp) => { 
                                return path.match(it);
                               });
                               if(parsers.length <= 0) {
                                   reject("Could not find a parser for " + fileName);
                               } else {
                                    let parser = this.parsers.get(parsers[0]); //Use first matching parser
                                    if(parser === undefined) {
                                        reject("Found a parser for " + fileName + ", but it's undefined somehow");
                                    } else {
                                        parser.parseDependencies(fileEntry.content).then((dependencies) => {
                                            resolve({path:fileEntry.path,dependencies:dependencies});
                                        });
                                    }
                               }
                            });
                        })).then((filesWithDependencies : any) => {
                            res.send(filesWithDependencies);
                        }).catch((err) => console.log(err));
                    }).catch((err) =>  console.log(err));
                }).catch((err) => console.log(err));
            }).catch((err) => console.log(err));
        }).catch((err) => console.log(err));

    }
}

export default TestRouter;