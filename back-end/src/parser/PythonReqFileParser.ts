import IReqFileParser from "./IReqFileParser";
import IDependency from "./IDependency";
import Dependency from "./Dependency";
import DependencyType from "./DependencyType";

class PythonReqFileParser implements IReqFileParser {

    validRowRegexp : RegExp;

    constructor() {
        this.validRowRegexp = new RegExp(/.*?==[0-9]{1}[0-9]{0,1}[0-9]{0,1}.*/)
    }
    parseDependencies = async(fileBody : string) : Promise<IDependency[]> => {
        return new Promise((resolve,reject) => {
            let dependencies : IDependency[] = [];

            let depRows = fileBody.split(/[\r\n]+/);

            for(let row in depRows) {
                let rowText = depRows[row];

                if(rowText.match(this.validRowRegexp)) {
                    let rowElements = rowText.split("==");
                    let dep = rowElements[0];
                    let versionElements = rowElements[1].split(".");

                    switch(versionElements.length) {

                        case 1:
                            break; //Skip silently
                        case 2:
                            dependencies.push(new Dependency(DependencyType.PYTHON, dep,versionElements[0],versionElements[1],"x"))
                            break;
                        case 3:
                            dependencies.push(new Dependency(DependencyType.PYTHON,dep,versionElements[0],versionElements[1],versionElements[2]))
                            break;
                        case 4:
                            dependencies.push(new Dependency(DependencyType.PYTHON,dep,versionElements[0],versionElements[1],versionElements[2] + versionElements[3])) //TODO: revisit
                            break;
                        default:
                            break;
                    }
                }
            }
            resolve(dependencies);

        });
    }
}

export default PythonReqFileParser;