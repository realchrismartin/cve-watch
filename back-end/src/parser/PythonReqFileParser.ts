import IReqFileParser from "./IReqFileParser";
import IDependency from "./IDependency";
import Dependency from "./Dependency";
import DependencyType from "./DependencyType";

/* Parser for Python requirements.txt type requirements files */
class PythonReqFileParser implements IReqFileParser {
  validRowRegexp: RegExp;

  constructor() {

    this.validRowRegexp = new RegExp(
      /(?!\#)(.*?)(==|>=|<=).*?([0-9]\.[0-9]\.{0,1}\.[0-9]{0,1}).*/
    );
  }

  parseDependencies = async (fileBody: string): Promise<IDependency[]> => {
    return new Promise((resolve, reject) => {
      let dependencies: IDependency[] = [];

      let depRows = fileBody.split(/[\r\n]+/);

      for (let row in depRows) {
        let rowText = depRows[row];
        let match = rowText.match(this.validRowRegexp);
        if (!match) {
            if(rowText.length > 0) {
                dependencies.push(new Dependency(DependencyType.PYTHON,rowText,"x","x","x"));
            }
        } else {
          let dep = match[0].trim();
          let versionElements = match[2].split(".");

          switch (versionElements.length) {
            case 0:
              dependencies.push(
                new Dependency(DependencyType.PYTHON, dep, "x", "x", "x")
              );
              break;
            case 1:
              dependencies.push(
                new Dependency(
                  DependencyType.PYTHON,
                  dep,
                  versionElements[0],
                  "x",
                  "x"
                )
              );
              break;
            case 2:
              dependencies.push(
                new Dependency(
                  DependencyType.PYTHON,
                  dep,
                  versionElements[0],
                  versionElements[1],
                  "x"
                )
              );
              break;
            case 3:
              dependencies.push(
                new Dependency(
                  DependencyType.PYTHON,
                  dep,
                  versionElements[0],
                  versionElements[1],
                  versionElements[2]
                )
              );
              break;
            case 4:
              dependencies.push(
                new Dependency(
                  DependencyType.PYTHON,
                  dep,
                  versionElements[0],
                  versionElements[1],
                  versionElements[2] + versionElements[3]
                )
              ); 
              break;
            default:
              console.log("Skipped Python dependency (no version information)");
              break;
          }
        }
      }
      resolve(dependencies);
    });
  };
}

export default PythonReqFileParser;
