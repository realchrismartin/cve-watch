import IReqFileParser from "./IReqFileParser";
import IDependency from "./IDependency";
import Dependency from "./Dependency";
import DependencyType from "./DependencyType";

class NodeReqFileParser implements IReqFileParser {
    parseDependencies = async(fileBody : string) : Promise<IDependency[]> => {
        return new Promise((resolve,reject) => {
            let dependencies : IDependency[] = [];

            try {
                let dependencyFile = JSON.parse(fileBody);

                let allDependencies = { ...dependencyFile.dependencies, ...dependencyFile.devDependencies, ...dependencyFile.peerDependencies }

                for(let dep in allDependencies) {
                    let version = allDependencies[dep]
                    
                   let versionElements = version.split(".");
                   
                   switch(versionElements.length) {
                        case 1:
                            //Do nothing/silently skip (TODO?)
                        break;
                        case 2: 
                            dependencies.push(new Dependency(DependencyType.JAVASCRIPT,dep,versionElements[0],versionElements[1],"x"))
                            break
                        case 3:
                            dependencies.push(new Dependency(DependencyType.JAVASCRIPT,dep,versionElements[0],versionElements[1],versionElements[2]))
                            break;
                        default:
                            break;
                   }
                }
                resolve(dependencies);
            } catch(err) {
                reject(err);
            };
        });
    } 
}

export default NodeReqFileParser;