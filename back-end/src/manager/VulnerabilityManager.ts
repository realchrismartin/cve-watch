import { cacheInvalidationDelay, nvdBaseURI, requestSleepTime, vulnPubDateParam } from "../Settings";
import axios from "axios";
import delay from "delay";
import qs from "querystring";

export interface VulnerabilityResult {
    failed: boolean;
    items: any[];
    total: number;
}

export interface CacheValue {
    result: Promise<VulnerabilityResult>;
    time: number;
}

export interface IVulnerabilityManager {
    getVulns(startIndex: number, resultsPerPage: number, keyword?: string): Promise<VulnerabilityResult>;
}


export class VulnerabilityManager implements IVulnerabilityManager {
    private vulnCache: Map<string, CacheValue>;
    private lastReqTime: number = 0;

    constructor() {
        this.vulnCache = new Map();
        this.runCacheSweeper();
    }

    /* Every cacheInvalidationDelay() ms, delete any old cache items */
    private runCacheSweeper = () => {
        for (let key in this.vulnCache) {
            let value = this.vulnCache.get(key) as CacheValue;
            if (Date.now() - value.time > cacheInvalidationDelay()) {
                this.vulnCache.delete(key);
            }
        }
        
        setTimeout(this.runCacheSweeper, cacheInvalidationDelay());
    }

    /* Check cache for requested data from Vulnerability Router and return.
       If not cached, request from CVE API and add to cache, with query as key. */
    async getVulns(startIndex: number, resultsPerPage: number, keyword?: string): Promise<VulnerabilityResult> {
        let cacheKey = [startIndex, resultsPerPage, keyword].join("|");
        let keywords = [];

        if (!this.vulnCache.has(cacheKey)) {
            let queryParts = {
                startIndex,
                resultsPerPage,
                keyword,
            };

            // TODO: split into multiple queries if multiple keywords and/or CPE IDs
            // How does front end send CPE IDs anyway??
            if (!keyword) {
                delete queryParts.keyword;
            } else {
                keywords = keyword.split("+")
                // loop over keywords and send a request for each
                // then add each to cache
                // then sort by modifiedDate before returning to front end
            }

            let query = qs.stringify(queryParts);
            let fetchPromise = this.fetchFromApi(query, cacheKey); // not await'ing on purpose
            let cacheVal = { result: fetchPromise, time: Date.now() };
            this.vulnCache.set(cacheKey, cacheVal);
        }


        return this.vulnCache.get(cacheKey)?.result as Promise<VulnerabilityResult>; // guaranteed to be set from above
    }
    
    /* Send request to CVE API, with rate limiting */
    private async fetchFromApi(query: string, cacheKey: string): Promise<VulnerabilityResult> {
        if (Date.now() - this.lastReqTime < requestSleepTime()) {
            await delay(requestSleepTime());
        }    
        
        this.lastReqTime = Date.now();

        //TODO: Ensure order is correct (may be ordered by oldest first ...)
        // Order seems correct now - it's just ordered by modDate instead of pubDate
        let response = await axios.get(`${nvdBaseURI()}/cves/1.0?${query}&pubStartDate=${vulnPubDateParam()}`);

        if (response.status === 200 && response.data?.result) {
            return {
                failed: false,
                items: response.data.result.CVE_Items,
                total: response.data.totalResults,
            };
        }

        this.vulnCache.delete(cacheKey); // immediately delete from cache if API call failed

        return {
            failed: true,
            items: [],
            total: 0,
        };
    }
}