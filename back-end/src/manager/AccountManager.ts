import { createNewAccount, getUserById, getUserByName } from '../model/AccountModel'
import { IAccount } from '../model/AccountModel';
import { addSub, getSubsByUserId, ISubscription, removeSub } from '../model/SubscriptionModel';

export interface IAccountManager {
    createUser(user: {}): Promise<IAccount>;
    getUserByUsername(username: string): Promise<IAccount | null>;
    getUserByUserId(userID: string): Promise<IAccount | null>;
    getSubscriptions(userID: string): Promise<ISubscription[]>;
    addSubscription(userID: string, subscription: string): Promise<ISubscription>;
    removeSubscription(userID: string, subscription: string): Promise<any>;
}

/* Coontroller for Account objects */
export class AccountManager implements IAccountManager {
    /* Call data model to create new user account */
    createUser = (user: {}) => {
        return createNewAccount(user);
    }
    
    /* Call data model to get a user by username */
    getUserByUsername = (username: string) => {
        return getUserByName(username);
    }
    
    /* Call data model to get a user by their ID */
    getUserByUserId = (userID: string) => {
        return getUserById(userID);
    }

    /* Call data model to get all subscriptions for specific user */
    getSubscriptions = (userID: string) => {
        return getSubsByUserId(userID);
    }
   
    /* Call data model to add a subscription for the specified user */
    addSubscription = (userID: string, subscription: string) => {
        return addSub({user: userID, keyword: subscription});
    }
    
    /* Call data model to remove a subscription for the specified user */
    removeSubscription = (userID: string, subscription: string) => {
        return removeSub({user: userID, keyword: subscription});
    }
}
