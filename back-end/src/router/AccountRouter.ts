import express, { Router } from "express";
import IRouter from "./IRouter";
import axios from "axios";
import IReqFileParser from "../parser/IReqFileParser";
import PythonReqFileParser from "../parser/PythonReqFileParser";
import NodeReqFileParser from "../parser/NodeReqFileParser";
import IDependency from "../parser/IDependency";
import AbstractRouter from "./AbstractRouter";
import isAuthenticatedMiddleware from "../middleware/isAuthenticatedMiddleware";

class AccountRouter extends AbstractRouter implements IRouter {
  reqParams: Object;
  parsers: Map<RegExp, IReqFileParser>;
  users: Map<String,Object>; //TODO: Replace this with Mongoose references

  constructor(app: express.Application, route: string) {
    super(app, route);

    //Set up routes
    //TODO: update to add all routes
    //this.router.get("/:user/:name",this.testRoute); //TODO: remove this route

    this.router.post("/login", this.accountLoginRoute);
    this.router.get("/session",isAuthenticatedMiddleware,this.accountSessionRoute);
    this.router.post("/logout",isAuthenticatedMiddleware,this.accountLogoutRoute);
    this.router.get("/subscriptions/:username",isAuthenticatedMiddleware,this.accountSubscriptionsRoute);
    this.router.post("/", this.accountCreateRoute);

    //Set up default request parameters
    //TODO: Set this to not use a hardcoded token ;3
    this.reqParams = {
      headers: {
        Authorization: "Token some_github_personal_access_token",
      },
    };

    //Set up RegExp -> Parser mappings
    this.parsers = new Map<RegExp, IReqFileParser>();
    this.parsers.set(
      new RegExp(".*?requirements/.*?.txt"),
      new PythonReqFileParser()
    );
    this.parsers.set(
      new RegExp(".*?requirements.txt"),
      new PythonReqFileParser()
    );
    this.parsers.set(new RegExp(".*?package.json"), new NodeReqFileParser());

    //Set up fake user store. TODO: Replace with Mongoose
    this.users = new Map<String,Object>();
  }

  //POST /accounts/login : Login as a given user
  //Use: AccountLoginView
  accountLoginRoute = async (req: any, res: express.Response) => {
    let username = req.body.username;
    let encryptedPassword = req.body.password;
    let token = encryptedPassword; //TODO: Do encryption before sending this back to user

    if(req.session.token) {
        console.log("already logged in.")
        return res.status(200).send({message:"You are already authenticated"})
    } 

    if(this.users.get(username)) { //TODO: Replace pointless conditional with an actual account/password check
        req.session.token = token; 
        console.log("logging user in ...")
        return res.status(200).send();
    } else {
        return res.status(401).send({error:"User doesn't exist"});
    }
  };

  //POST /accounts/logout : Log out of the application
  //Use: NavBar / all views
  accountLogoutRoute = async (req: any, res: express.Response) => {
    return req.session.destroy(() => {
      res.status(200).send()
    });
  };

  //POST /accounts/create : Create an account
  //Use: AccountCreateview
  accountCreateRoute = async (req: express.Request, res: express.Response) => {
    let username = req.body.username;
    let encryptedPassword = req.body.password;


    if(this.users.get(username) !== undefined) {
        res.status(400).send({message:"User exists already"})
    } else {

        this.users.set(username,{password:encryptedPassword}) //TODO: Replace
        res.status(200).send({message:"Created user " + username});
    }
    
  };

  accountSessionRoute = async (req: express.Request, res: express.Response) => {
    res.status(200).send(); //Auth handled in middleware
  }

  //POST /accounts/update : Update an account to change user details
  //Note: Optional functionality
  //Use: AccountSettingsView
  accountUpdateRoute = async (req: express.Request, res: express.Response) => {
    res.send({ note: "Not yet implemented" });
  };

  //GET /accounts/subscriptions : Get subscriptions for the logged in user
  accountSubscriptionsRoute = async(req: express.Request, res: express.Response) => {
     //Note: username route param available
    res.send({subscriptions:["tomcat","apache"]}) //TODO: Replace with real data
  }

  //PUT /accounts/subscribe : Updates an account to subscribe to one or more CPEs, CVE search terms, or tracked repositories
  accountSubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };

  //PUT /accounts/unsubscribe : Updates an account to unsubscribe from one or more CPEs, CVE search terms, or tracked repositories
  accountUnsubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };

  //TODO: Deprecate this and replace with /accounts/subscribe endpoint
  testRoute = async (req: express.Request, res: express.Response) => {
    let repoName = req.params.name;
    let user = req.params.user;

    axios
      .get(
        "https://api.github.com/repos/" + user + "/" + repoName + "/commits",
        this.reqParams
      )
      .then((commitRes) => {
        let commitResBody = commitRes.data;
        let treeSha = commitResBody[0]["commit"]["tree"]["sha"];

        //NOTE: May fail if recursion is too deep, add handling for pagination (?)
        axios
          .get(
            "https://api.github.com/repos/" +
              user +
              "/" +
              repoName +
              "/git/trees/" +
              treeSha +
              "?recursive=true",
            this.reqParams
          )
          .then((treeRes) => {
            let fileList = treeRes.data["tree"];

            Promise.all(
              fileList
                .filter((fileEntry: any) => {
                  let parsers = Array.from(this.parsers.keys()).filter(
                    (it: RegExp) => {
                      return fileEntry["path"].match(it);
                    }
                  );
                  return parsers.length > 0; //At least one matching parser exists
                })
                .map((fileEntry: any) => {
                  return new Promise((resolve, reject) => {
                    axios
                      .get(fileEntry.url, this.reqParams)
                      .then((res) => {
                        resolve({ path: fileEntry.path, data: res.data });
                      })
                      .catch((err) => {
                        reject(err);
                      });
                  });
                })
            )
              .then((reqFiles: any[]) => {
                Promise.all(
                  reqFiles.map((fileEntry: any) => {
                    return new Promise((resolve, reject) => {
                      let fileName = fileEntry.path.split("/").pop();
                      let content = Buffer.from(
                        fileEntry.data.content,
                        "base64"
                      ).toString("utf-8");
                      resolve({
                        path: fileEntry.path,
                        fileName: fileName,
                        content: content,
                      });
                    });
                  })
                )
                  .then((reqFiles) => {
                    Promise.all(
                      reqFiles.map((fileEntry: any) => {
                        return new Promise((resolve, reject) => {
                          let fileName = fileEntry.fileName;
                          let path = fileEntry.path;
                          let parsers = Array.from(this.parsers.keys()).filter(
                            (it: RegExp) => {
                              return path.match(it);
                            }
                          );
                          if (parsers.length <= 0) {
                            reject("Could not find a parser for " + fileName);
                          } else {
                            let parser = this.parsers.get(parsers[0]); //Use first matching parser
                            if (parser === undefined) {
                              reject(
                                "Found a parser for " +
                                  fileName +
                                  ", but it's undefined somehow"
                              );
                            } else {
                              parser
                                .parseDependencies(fileEntry.content)
                                .then((dependencies) => {
                                  let dependencyStrings = dependencies.map(
                                    (it: IDependency) => it.toString()
                                  );
                                  resolve({
                                    path: fileEntry.path,
                                    dependencies: dependencyStrings,
                                  });
                                });
                            }
                          }
                        });
                      })
                    )
                      .then((filesWithDependencies: any) => {
                        res.send(filesWithDependencies);
                      })
                      .catch((err) => console.log(err));
                  })
                  .catch((err) => console.log(err));
              })
              .catch((err) => console.log(err));
          })
          .catch((err) => console.log(err));
      })
      .catch((err) => console.log(err));
  };
}

export default AccountRouter;
