import express, { Router } from "express";
import bcrypt from "bcrypt";
import IRouter from "./IRouter";
import AbstractRouter from "./AbstractRouter";
import isAuthenticatedMiddleware from "../middleware/isAuthenticatedMiddleware";
import { createUser, getUserByUserId, getUserByUsername } from "../manager/AccountManager";

declare module 'express-session' {
    interface SessionData {
        isLoggedIn?: boolean;
        userID: string;
    }
}
const cors = require("cors");

class AccountRouter extends AbstractRouter implements IRouter {
  saltRounds: number = 10;

  constructor(app: express.Application, route: string) {
    super(app, route);

    //Set up routes
    //TODO: update to add all routes
    this.router.options("*",cors()); //Enable CORS for accounts
    this.router.post("/", this.accountCreateRoute);
    this.router.post("/login", this.accountLoginRoute);
    this.router.post(
      "/logout",
      isAuthenticatedMiddleware,
      this.accountLogoutRoute
    );
    this.router.get("/session", this.accountSessionRoute);
    this.router.get(
      "/subscriptions",
      isAuthenticatedMiddleware,
      this.accountSubscriptionsRoute
    );
    //TODO: add this.router.put for adding subscriptions
    //TODO: add this.router.delete for deleting subscriptions
    //TODO: add this.router.delete for deleting account (if time)
  }


  //POST /accounts/login : Login as a given user
  //Use: AccountLoginView
  accountLoginRoute = async (req: any, res: express.Response) => {
    if (req.session.isLoggedIn) {
      console.log("already logged in.");
      return res.status(200).send({ message: "You are already authenticated" });
    }

    let username: string = req.body.username;
    const dbUser = await getUserByUsername(username);

    if (dbUser) {
      const checkPass: boolean = await bcrypt.compare(req.body.password, dbUser.password);

      if (checkPass) {
        req.session.isLoggedIn = true; //Providing a token on the session is used in isAuthenticatedMiddleware to determine if a user has a session or not
        req.session.userID = dbUser._id;
        return res.status(200).send();
      } else {
        return res.status(401).send({ error: "User credentials were bad" });
      }
    } else {
      return res.status(401).send({ error: "User doesn't exist" });
    }
  };

  //POST /accounts/logout : Log out of the application
  //Use: NavBar / all views
  accountLogoutRoute = async (req: any, res: express.Response) => {
    return req.session.destroy(() => {
      res.status(200).send();
    });
  };

  //POST /accounts/create : Create an account
  //Use: AccountCreateview
  accountCreateRoute = async (req: express.Request, res: express.Response) => {
    const existingUser = await getUserByUsername(req.body.username);

    if (existingUser !== null) {
      res.status(400).send({ message: "User exists already" });
    } else {
      const hashedP = await bcrypt.hash(req.body.password, this.saltRounds);
      const dbUser = await createUser({username: req.body.username, password: hashedP});

      req.session.isLoggedIn = true; // used in isAuthenticatedMiddleware to determine if a user has a session or not
      req.session.userID = dbUser._id; // TODO: make this real - get last inserted index in user
      
      res.status(200).send({ message: "Created user " + dbUser.username });
    }
  };

  accountSessionRoute = async (req: any, res: express.Response) => {
    //TODO: Add better validation on this token
    if (!req.session.isLoggedIn) {
      res.status(200).send({ session: false });
    } else {
      res.status(200).send({ session: true });
    }
  };

  //POST /accounts/update : Update an account to change user details
  //Note: Optional functionality
  //Use: AccountSettingsView
  accountUpdateRoute = async (req: express.Request, res: express.Response) => {
    res.send({ note: "Not yet implemented" });
  };

  
  // GET /accounts/subscriptions : Get subscriptions for the logged in user
  // returns empty array if user has no subscriptions
  accountSubscriptionsRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    
    if (req.session.userID) {
      const dbUser = await getUserByUserId(req.session.userID);
      if (dbUser) {
        res.status(200).send(dbUser.subscriptions);
      }
    } else {
      res.status(401).send({ error: "Can't get subscriptions when not logged in"});
    }
  };

  //PUT /accounts/subscribe : Updates an account to subscribe to one or more CPEs, CVE search terms, or tracked repositories
  accountSubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };

  //PUT /accounts/unsubscribe : Updates an account to unsubscribe from one or more CPEs, CVE search terms, or tracked repositories
  accountUnsubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };
}

export default AccountRouter;
