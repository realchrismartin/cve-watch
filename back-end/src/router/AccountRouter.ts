import express, { Router } from "express";
import IRouter from "./IRouter";
import AbstractRouter from "./AbstractRouter";
import isAuthenticatedMiddleware from "../middleware/isAuthenticatedMiddleware";
const cors = require("cors");

class AccountRouter extends AbstractRouter implements IRouter {
  users: Map<String, Object>; //TODO: Replace this with Mongoose references

  constructor(app: express.Application, route: string) {
    super(app, route);

    //Set up routes
    //TODO: update to add all routes
    this.router.options("*",cors()); //Enable CORS for accounts
    this.router.post("/", this.accountCreateRoute);
    this.router.post("/login", this.accountLoginRoute);
    this.router.post(
      "/logout",
      isAuthenticatedMiddleware,
      this.accountLogoutRoute
    );
    this.router.get("/session", this.accountSessionRoute);
    this.router.get(
      "/subscriptions/:username",
      isAuthenticatedMiddleware,
      this.accountSubscriptionsRoute
    );

    //Set up fake user store. TODO: Replace with Mongoose
    this.users = new Map<String, Object>();
  }

  //POST /accounts/login : Login as a given user
  //Use: AccountLoginView
  accountLoginRoute = async (req: any, res: express.Response) => {
    let username = req.body.username;
    let encryptedPassword = req.body.password;
    let token = encryptedPassword; //TODO: Do encryption before sending this back to user

    if (req.session.token) {
      console.log("already logged in.");
      return res.status(200).send({ message: "You are already authenticated" });
    }

    if (this.users.get(username)) {
      //TODO: Replace pointless conditional with an actual account/password check
      req.session.token = token; //Providing a token on the session is used in isAuthenticatedMiddleware to determine if a user has a session or not
      console.log("logging user in ...");
      return res.status(200).send();
    } else {
      return res
        .status(401)
        .send({ error: "User doesn't exist, or credentials were bad" });
    }
  };

  //POST /accounts/logout : Log out of the application
  //Use: NavBar / all views
  accountLogoutRoute = async (req: any, res: express.Response) => {
    return req.session.destroy(() => {
      res.status(200).send();
    });
  };

  //POST /accounts/create : Create an account
  //Use: AccountCreateview
  accountCreateRoute = async (req: express.Request, res: express.Response) => {
    let username = req.body.username;
    let encryptedPassword = req.body.password;

    if (this.users.get(username) !== undefined) {
      res.status(400).send({ message: "User exists already" });
    } else {
      this.users.set(username, { password: encryptedPassword }); //TODO: Replace this with database
      res.status(200).send({ message: "Created user " + username });
    }
  };

  accountSessionRoute = async (req: any, res: express.Response) => {
    //TODO: Add better validation on this token
    if (!req.session.token) {
      res.status(200).send({ session: false });
    } else {
      res.status(200).send({ session: true });
    }
  };

  //POST /accounts/update : Update an account to change user details
  //Note: Optional functionality
  //Use: AccountSettingsView
  accountUpdateRoute = async (req: express.Request, res: express.Response) => {
    res.send({ note: "Not yet implemented" });
  };

  //GET /accounts/subscriptions : Get subscriptions for the logged in user
  accountSubscriptionsRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    //Note: username route param available
    res.send({ subscriptions: ["tomcat", "apache"] }); //TODO: Replace with real data
  };

  //PUT /accounts/subscribe : Updates an account to subscribe to one or more CPEs, CVE search terms, or tracked repositories
  accountSubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };

  //PUT /accounts/unsubscribe : Updates an account to unsubscribe from one or more CPEs, CVE search terms, or tracked repositories
  accountUnsubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    res.send({ note: "Not yet implemented" });
  };
}

export default AccountRouter;
