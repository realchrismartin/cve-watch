import express from "express";
import bcrypt from "bcrypt";
import IRouter from "./IRouter";
import AbstractRouter from "./AbstractRouter";
import isAuthenticatedMiddleware from "../middleware/isAuthenticatedMiddleware";
import { IAccountManager } from "../manager/AccountManager";

class AccountRouter extends AbstractRouter implements IRouter {
  protected saltRounds: number = 10;
  protected accountManager: IAccountManager;

  constructor(
    app: express.Application,
    route: string,
    AccountManager: IAccountManager
  ) {
    super(app, route);

    this.accountManager = AccountManager;

    //Set up routes
    this.router.post("/", this.accountCreateRoute);
    this.router.post("/login", this.accountLoginRoute);
    this.router.post(
      "/logout",
      isAuthenticatedMiddleware,
      this.accountLogoutRoute
    );
    this.router.get(
      "/subscriptions",
      isAuthenticatedMiddleware,
      this.accountSubscriptionsRoute
    );
    this.router.put(
      "/subscribe",
      isAuthenticatedMiddleware,
      this.accountSubscribeRoute
    );
    this.router.delete(
      "/unsubscribe/:software",
      isAuthenticatedMiddleware,
      this.accountUnsubscribeRoute
    );
    this.router.get("/session", this.accountSessionRoute);
    //TODO: add this.router.delete for deleting account (if time)
  }

  //POST /accounts/login : Login as a given user
  //Use: AccountLoginView
  accountLoginRoute = async (req: any, res: express.Response) => {
    if (req.session.isLoggedIn) {
      res.status(200).send({ message: "You are already authenticated" });
      return;
    }

    let username: string = req.body.username;
    const dbUser = await this.accountManager.getUserByUsername(username);

    if (dbUser) {
      const checkPass: boolean = await bcrypt.compare(
        req.body.password,
        dbUser.password
      );

      if (checkPass) {
        req.session.isLoggedIn = true; //used in isAuthenticatedMiddleware to determine if a user has a session or not
        req.session.userID = dbUser._id; // unique db ID for user
        req.session.username = username;
        res.status(200).send({result:"Logged in as user"});
      } else {
        res.status(401).send({ error: "User credentials were bad" });
      }
    } else {
      res.status(401).send({ error: "User doesn't exist" });
    }
  };

  //POST /accounts/logout : Log out of the application
  //Use: NavBar / all views
  accountLogoutRoute = async (req: any, res: express.Response) => {
    return req.session.destroy(() => {
      res.status(200).send();
    });
  };

  //POST /accounts/create : Create an account
  //Use: AccountCreateview
  accountCreateRoute = async (req: express.Request, res: express.Response) => {
    const existingUser = await this.accountManager.getUserByUsername(
      req.body.username
    );

    if (existingUser !== null) {
      return res.status(400).send({ message: "User exists already" });
    } else {
      const hashedP = await bcrypt.hash(req.body.password, this.saltRounds);
      const dbUser = await this.accountManager.createUser({
        username: req.body.username,
        password: hashedP,
      });

      if(dbUser) {
        res.status(200).send({
          message: "Created user " + dbUser.username,
        })
      } else {
        res.status(500).send({error:"Failed to create user"});
      }
    }
  };

  //POST /accounts/update : Update an account to change user details
  //Note: Optional functionality
  //Use: AccountSettingsView
  accountUpdateRoute = async (req: express.Request, res: express.Response) => {
    res.send({ note: "Not yet implemented" });
  };

  // GET /accounts/subscriptions : Get subscriptions for the logged in user
  // returns empty array if user has no subscriptions
  accountSubscriptionsRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    const dbUser = await this.accountManager.getUserByUserId(
      req.session.userID as string
    );
    if (dbUser) {
      res.status(200).send({data:dbUser.subscriptions});
    } else {
      res.status(400).send({error:"User not found with id"});
    }
  };

  //PUT /accounts/subscribe : Updates an account to subscribe to a new
  // software keyword from the NVD.
  accountSubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    if (req.session.userID) {
      const dbUser = await this.accountManager.addSubscription(
        req.session.userID,
        req.body.subscription
      );
      if (dbUser) {
        res.status(200).send(dbUser.subscriptions);
      } else {
        res.status(500).send("Failed to add subscription");
      }
    } else {
      res.status(400).send("No username was provided");
    }
  };

  //PUT /accounts/unsubscribe : Updates an account to unsubscribe from a
  // software keyword from the NVD.
  accountUnsubscribeRoute = async (
    req: express.Request,
    res: express.Response
  ) => {
    if (req.session.userID) {
      const unsub = req.params.software;
      const dbUser = await this.accountManager.removeSubscription(
        req.session.userID,
        unsub
      );
      if (dbUser) {
        res.status(200).send(dbUser.subscriptions);
      } else {
        res.status(500).send({error:"Could not find user"})
      }
    }
  };

  //GET /accounts/session : check for logged in user session
  accountSessionRoute = async (req: express.Request, res: express.Response) => {
    if (req.session.isLoggedIn) {
      res.status(200).send({ session: true });
    } else {
     res.status(200).send({ session: false });
    }
  };
}

export default AccountRouter;
