import express from "express";
import AbstractRouter from "./AbstractRouter";
import IRouter from "./IRouter";
import CVE_API from "./CVE_API";

class VulnerabilityRouter extends AbstractRouter implements IRouter {

    constructor(app : express.Application, route : string) {
        super(app,route);
        
        //TODO: update to add all routes
        this.router.get("/",this.getVulnerabilitiesRoute);
        this.router.get("/test/",this.getVulnerabilitiesTestRoute);
    }

    //GET vulnerabilities/ : Get the n most recent vulnerabilities from NVD (or further in the list, if start/end specified)
    //Use: VulnerabilityListView
    getVulnerabilitiesRoute = async(req : express.Request, res : express.Response) => {
        let startAt = req.query.startAt as string;
        let pageSize = req.query.pageSize as string;

        if(startAt === undefined || pageSize === undefined) {
            res.status(400);
            res.send({error:"Request was missing either startAt or pageSize params"})
        }

        let result = [] as any[];

        if(req.query.query !== undefined) {
         result = await CVE_API.getMore(req.query.query as string,parseInt(startAt),parseInt(pageSize));
        } else {
         result = await CVE_API.getMore("",parseInt(startAt),parseInt(pageSize));
        }

        res.send({results:result});
    }

    getVulnerabilitiesTestRoute = async(req : express.Request, res : express.Response) => {
        let startAt = req.query.startAt as string;
        let pageSize = req.query.pageSize as string;

        if(startAt === undefined || pageSize === undefined) {
            res.status(400);
            res.send({error:"Request was missing either startAt or pageSize params"})
        }

        let result = [] as any[];


        let results=[] as any[];
        let start = parseInt(startAt)

        for(let i=start;i<start+parseInt(pageSize);i++) {
            let item = {
                cve:{
                    CVE_data_meta:{
                        ID:"CVE-" + i + "-" + req.query.query
                    },
                    description:{
                        description_data:[
                            {
                                value:"Test Data"
                            }
                        ]
                    }
                }
            } 
            results.push(item);
        }
        res.send({results:results})
    }
    //GET vulnerabilities/search : Get the n most recent vulnerabilities which could affect a specific software @ version
    //Parameters: Software name search term, software version
    //TBD: May not be required if filtering is used on main list (may be expensive)
    //Use: VulnerabilityListView (logged in)
    getVulnerabilitiesForSoftwareRoute = async(req : express.Request, res : express.Response) => {
        res.send({note:"Not yet implemented"})
    }

    //GET vulnerabilities/some-cpe-id : Get the n most recent vulnerabilities from NVD for the specified software
    //Use: SoftwareSearchView
    getVulnerabilitiesForSoftwareByIdRoute = async(req : express.Request, res : express.Response) => {
        res.send({note:"Not yet implemented"})
    }

    testRoute = async(req : express.Request, res : express.Response) => {
        res.send({response:"Hello from the Software Router!"});
    }
}

export default VulnerabilityRouter;