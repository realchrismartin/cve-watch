import express from "express";
import AbstractRouter from "./AbstractRouter";
import IRouter from "./IRouter";
import mockCVEResult from "../../test/mockCVEResult";
import axios, {AxiosResponse} from "axios";
import { nvdBaseURI, requestSleepTime, useRealData } from "../Settings";
import delay from "delay";

class VulnerabilityRouter extends AbstractRouter implements IRouter {

    constructor(app : express.Application, route : string) {
        super(app,route);
        this.router.get("/",this.getVulnerabilitiesRoute);
    }

    //GET vulnerabilities/ : Get the n most recent vulnerabilities from NVD (or further in the list, if start/end specified)
    //Use: VulnerabilityListView
    getVulnerabilitiesRoute = async(req : express.Request, res : express.Response) => {
        let startAt = req.query.startAt as string;
        let pageSize = req.query.pageSize as string;

        if(startAt === undefined || pageSize === undefined) {
            res.status(400);
            res.send({error:"Request was missing either startAt or pageSize params"})
        }

        let result = [] as [];

        //Use fake data override if not set 
        if(!useRealData()) {
            let results=[] as any[];
            let start = parseInt(startAt)
    
            for(let i=start;i<start+parseInt(pageSize);i++) {
                let item = mockCVEResult; 
                results.push(item);
            }

            res.send({results:results,total:999999}) //TODO: set total to real total
            return;
        }

        let response : AxiosResponse<any>;

        //TODO: use delay() to set a delay
        delay(requestSleepTime());

        //TODO: Ensure order is correct (may be ordered by oldest first ...)
        if(req.query.query !== undefined) {
        // TODO: parse multi-term searches
            response = await axios.get(`${nvdBaseURI()}/cves/1.0?keyword=${req.query.query}&startIndex=${startAt}&resultsPerPage=${pageSize}`);
        } else {
            response = await axios.get(`${nvdBaseURI()}/cves/1.0?startIndex=${startAt}&resultsPerPage=${pageSize}`) as AxiosResponse;
        }

        let parsedResponse : any = JSON.parse(JSON.stringify(response.data));

        let results = [] as any[];
        let total = 0;
        if(parsedResponse.result) {
            results  = parsedResponse.result.CVE_Items
            total= parsedResponse.totalResults
        }
        res.send({results:results,total:total}); 
    }
}

export default VulnerabilityRouter;