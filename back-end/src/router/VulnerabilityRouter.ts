import express from "express";
import AbstractRouter from "./AbstractRouter";
import IRouter from "./IRouter";
import mockCVEResult from "../../test/mockCVEResult";
import { useRealData } from "../Settings";
import { IVulnerabilityManager, VulnerabilityManager } from "../manager/VulnerabilityManager";

class VulnerabilityRouter extends AbstractRouter implements IRouter {
    protected vulnerabilityManager: IVulnerabilityManager;

    constructor(app : express.Application, route : string) {
        super(app,route);
        this.router.get("/",this.getVulnerabilitiesRoute);
        this.vulnerabilityManager = new VulnerabilityManager();
    }

    //GET vulnerabilities/ : Get the n most recent vulnerabilities from NVD (or further in the list, if start/end specified)
    //Use: VulnerabilityListView
    getVulnerabilitiesRoute = async(req : express.Request, res : express.Response) => {
        let startAt = parseInt(req.query.startAt as string);
        let pageSize = parseInt(req.query.pageSize as string);

        if(startAt === undefined || pageSize === undefined) {
            res.status(400);
            return res.send({error:"Request was missing either startAt or pageSize params"});
        }

        //Use fake data override if not set 
        if(!useRealData()) {
            let results=[] as any[];
            let start = startAt;
    
            for(let i=start;i<start+pageSize;i++) {
                let item = mockCVEResult; 
                results.push(item);
            }

            res.send({results:results,total:999999}) //TODO: set total to real total
            return;
        }
        
        let keyword;
        if (req.query.query) {
            keyword = req.query.query as string;
        }

        let result = await this.vulnerabilityManager.getVulns(startAt, pageSize, keyword);

        if (result.failed) {
            return res.status(400).send("CVE API request failed");
        }
        res.send({results: result.items, total: result.total}); 
    }
}

export default VulnerabilityRouter;