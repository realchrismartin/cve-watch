import express from "express";
import AbstractRouter from "./AbstractRouter";
import IRouter from "./IRouter";
import mockCVEResult from "../../test/mockCVEResult";
import { useRealData } from "../Settings";
import { IVulnerabilityManager, VulnerabilityManager, VulnerabilityResult } from "../manager/VulnerabilityManager";

class VulnerabilityRouter extends AbstractRouter implements IRouter {
    protected vulnerabilityManager: IVulnerabilityManager;

    constructor(app : express.Application, route : string) {
        super(app,route);
        this.router.get("/",this.getVulnerabilitiesRoute);
        this.vulnerabilityManager = new VulnerabilityManager();
    }

    //GET vulnerabilities/ : Get the n most recent vulnerabilities from NVD (or further in the list, if start/end specified)
    //Use: VulnerabilityListView
    getVulnerabilitiesRoute = async(req : express.Request, res : express.Response) => {
        if(req.query.startAt === undefined || req.query.pageSize === undefined) {
            res.status(400);
            return res.send({error:"Request was missing either startAt or pageSize params"});
        }
        
        let startAt = parseInt(req.query.startAt as string);
        let pageSize = parseInt(req.query.pageSize as string);

        //Use fake data override if not set 
        if(!useRealData()) {
            let results=[] as any[];
            let start = startAt;
    
            for(let i=start;i<start+pageSize;i++) {
                let item = mockCVEResult; 
                results.push(item);
            }

            res.send({results:results,total:999999}) //TODO: set total to real total
            return;
        }

        let result: VulnerabilityResult;
        
        if (req.query.query) {
            let keyword;
            let keywords;
            keyword = req.query.query as string;
            keywords = keyword.split(" ");
            console.info(keywords);
            let results = [];
            for (let i = 0; i < keywords.length; i++) {
                // loop over keywords and send a request for each - don't await here
                // request full pageSize for each in case of failures
                results.push(this.vulnerabilityManager.getVulns(startAt, pageSize, keywords[i]));
            }
            
            // await all here before concatenating into one object
            results = await Promise.all(results);
            result = {
                // only failed if all requests failed
                failed: results.every((thisResult) => thisResult.failed === true),
                // collect all items from results that did not failed
                items: results.filter(thisResult => thisResult.failed === false).map(thisResult => thisResult.items),
                // get the total of all totals
                total: results.map(thisResult => thisResult.total).reduce((acc, thisTotal) => thisTotal + acc),
            };
        } else {
            result = await this.vulnerabilityManager.getVulns(startAt, pageSize);
        }
        
        if (result.failed) {
            return res.status(400).send("CVE API request failed");
        }

        const flattened = (arr: any[]) => [].concat(...arr);
        result.items = flattened(result.items);
        // finally, sort according to modified date since that's what the NVD does
        result.items.sort((a, b) => b["lastModifiedDate"] > a["lastModifiedDate"] ? 1 : -1);

        res.send({results: result.items.slice(0,pageSize), total: result.total}); 
    }
}

export default VulnerabilityRouter;