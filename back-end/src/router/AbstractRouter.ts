import express, { Router } from "express";
import IRouter from "./IRouter";
import session from "express-session";
import cors from "cors";
import createMemoryStore from 'memorystore';
import {secret,env, sessionMaxAge, corsAllowedOrigins} from "../Settings";

/* Abstract implementation of a Router */
/* Contains shared configuration */
class AbstractRouter implements IRouter {
  router: Router;

  constructor(app: express.Application, route: string) {
    this.router = express.Router();
    const MemoryStore = createMemoryStore(session);

    //Set router configuration according to environment
    let sessionConfig = {
      name: "cve-app-user-session",
      secret: secret(),
      store: new MemoryStore({
        checkPeriod: sessionMaxAge()
      }),
      cookie: {},
      saveUninitialized: false,
      resave: false,
    };

    if(env() === "production") {
      sessionConfig.cookie =  { maxAge: sessionMaxAge(), secure:true, sameSite:"none" };
    } else {
      sessionConfig.cookie =  { maxAge: sessionMaxAge(), secure:false };
    }

    app.set('trust proxy', 1); // trust first proxy

    //Configure CORS
    app.use(cors({
        origin: corsAllowedOrigins(),
        credentials: true,
        exposedHeaders: ['set-cookie']
    }));

    app.use(session(sessionConfig));
    app.use(express.json());
    app.use(route, this.router);
  }
}

export default AbstractRouter;
