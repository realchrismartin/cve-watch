import bent from 'bent';
const getRequest = bent('json');
import delay from 'delay';


//TODO: modify to return a proper Vulnerability[s] once vulnerability interface is created/implemented
const URL_SPECIFIC : string = "https://services.nvd.nist.gov/rest/json/cve/1.0";
const URL_COLLECTION : string = "https://services.nvd.nist.gov/rest/json/cves/1.0";

export default class CVE_API {
    /**
     * Makes a request to the CVE API for a CVE_Item, by a known identifier
     * @param cveId the identifier of the CVE we are requesting
     * @returns the CVE_Item requested
     */
    static async getById(cveId : string) : Promise<CVE_Item> {
        if(cveId == undefined || cveId === "") {
            throw Error("cveId must not be null or empty.");
        }
        let response = await getRequest(`${URL_SPECIFIC}/${cveId}`);
        let parsedResponse : api_response = JSON.parse(JSON.stringify(response));
        return Promise.resolve(parsedResponse.result.CVE_Items[0]);
    }

    /**
     * Makes an API request to the CVE API to search by keyword, and return a collection of CVE items
     * @param keyword string keyword being used for search
     * @param isExactMatch boolean flag indicating if only exact matches should be allowed
     * @returns an array of CVE_Items
     */
    static async getByKeyword(keyword : string, isExactMatch : boolean, includeMatchStringChange : boolean) : Promise<CVE_Item[]> {
        let exactMatchStr = "";
        if(isExactMatch) {exactMatchStr = "&isExactMatch=true";}
        let includeMatchStringStr = "";
        if(includeMatchStringChange) {includeMatchStringStr = "&includeMatchStringChange=true";}
        let response = await getRequest(`${URL_COLLECTION}?keyword=${keyword}${exactMatchStr}`);
        let parsedResponse : api_response = JSON.parse(JSON.stringify(response));
        return Promise.resolve(parsedResponse.result.CVE_Items);
    }

    /**
     * Takes in an array of keywords, and makes multiple requests to the CVE API based on those requests.
     * note: function sleeps for 2 seconds in between requests, to avoid lockout.
     * @param keywords array of string keywords being used for search
     * @param isExactMatch boolean flag indicating if only exact matches should be allowed
     * @param includeMatchStringChange boolean flag indicating if a match should be considered, if the CPE name has changed
     * @returns an array of CVE_Items, composed by the multiple requests.
     */
    static async getByKeywords(keywords : string[], isExactMatch : boolean, includeMatchStringChange : boolean) : Promise<CVE_Item[]> {
        let cve_items : CVE_Item[] = [];
        keywords.forEach(async keyword => {
            let result = await CVE_API.getByKeyword(keyword, isExactMatch, includeMatchStringChange);
            cve_items.push(...result);
            await delay(2000); //sleep for two seconds to avoid lockout
        });
        return Promise.resolve(cve_items);
    }
}

interface api_response { 
    resultsPerPage : any;
    startIndex : any;
    totalResults : any;
    result : result; 
}

interface result {
    CVE_data_type : any;
    CVE_data_format : any;
    CVE_data_version : any;
    CVE_data_timestamp : any;
    CVE_Items : CVE_Item[];
    
}

interface CVE_Item {
    cve : cve;
    configurations : any;
    impact : any;
    publishedDate : string;
    lastModifiedDate : string;
}

interface cve {
    data_type : any;
    data_format : any;
    data_version : any;
    CVE_data_meta : CVE_data_meta;
    problemtype : problemtype;
    references : references;
    description : description
    
}

interface CVE_data_meta {
    ID : string;
    ASSIGNER : string;
}

interface problemtype {
    problemtype_data : any[]
}

interface problemtype_data {
    description : problemtype_data_desc;
}

interface problemtype_data_desc {
    lang : any;
    value : any;
}

interface references {
    reference_data : reference_data[];
}

interface reference_data {
    url : string;
    name : string;
    refsource : string;
    tags? : string[];
}

interface description {
    description_data : description_data[];
}

interface description_data {
    lang : string;
    value : string;
}

// async function test1() {
//     let response = await CVE_API.getById("CVE-2020-12845");
//     console.log(response);
// }

// async function test2() {
//     let response = await CVE_API.getByKeyword("", false, false);
//     console.log(response);
// }

// test2();


