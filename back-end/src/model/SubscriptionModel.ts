import { model, Schema, Model, Document, CreateQuery, FilterQuery } from 'mongoose';
import { IAccount } from './AccountModel';

export interface ISubscription extends Document {
    user: IAccount["_id"];
    keyword: string;
}

const SubscriptionSchema : Schema = new Schema({
    user: {
        type: Schema.Types.ObjectId,
        required: true
    },
    keyword: {
        type: String,
        required: true
    }
});

const SubscriptionModel: Model<ISubscription> = model('Subscriptions', SubscriptionSchema);

/* Add a new subscription to the database for a given user ID */
export async function addSubscription({user, keyword}: CreateQuery<ISubscription>): Promise<ISubscription> {
    return SubscriptionModel.create({user, keyword})
        .then((data: ISubscription) => {
            return data;
        })
        .catch((error: Error) => {
            throw error;
        })
}

/* Find all subscriptions tied to given user ID */
export async function getSubsByUserId(userID: string) : Promise<ISubscription[]> {
    return SubscriptionModel.find({user: userID}).exec();
}

/* Remove the given keyword from the given user's subscriptions */
export async function removeSub({user, keyword}: FilterQuery<ISubscription>): Promise<void> {
    SubscriptionModel.deleteOne({user: user, keyword: keyword});
}