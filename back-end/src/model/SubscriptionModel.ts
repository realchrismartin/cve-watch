import { model, Schema, Model, Document } from 'mongoose';
import { IAccount } from './AccountModel';

export interface ISubscription extends Document {
    user: IAccount["_id"];
    keyword: string;
}

const SubscriptionSchema : Schema = new Schema({
    user: {
        type: Schema.Types.ObjectId,
        required: true
    },
    keyword: {
        type: String,
        required: true
    }
});

const SubscriptionModel: Model<ISubscription> = model('Subscriptions', SubscriptionSchema);

/* Add a new user object to the database */
export async function addSubscription(userId: IAccount["_id"], keyword: ISubscription["keyword"]): Promise<ISubscription> {
    return await SubscriptionModel.create(userId, keyword);
}

/* Find a user by their auto-generated ID in the database */
export function getUserById(userID: string) : Promise<ISubscription | null> {
    return SubscriptionModel.findById(userID).exec();
}

/* Find a user by username */
export function getUserByName(username: string) : Promise<ISubscription | null> {
    return SubscriptionModel.findOne({username: username}).exec();
}

export async function removeSub(userID: string, subscription: string): Promise<ISubscription | null> {
    let thisUser = await SubscriptionModel.findById(userID).exec();

    if (thisUser) {
        thisUser.subscriptions = thisUser.subscriptions.filter(item => item !== subscription);
        thisUser.save();
    }

    return thisUser;
}