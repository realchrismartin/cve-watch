import express from 'express';
import mongoose from 'mongoose';
import IRouter from './router/IRouter';
import AccountRouter from './router/AccountRouter';
import VulnerabilityRouter from './router/VulnerabilityRouter';
import SoftwareRouter from './router/SoftwareRouter';
import { AccountManager } from './manager/AccountManager';

class App {

    app : express.Application;
    dbConnectionString : string;
    server : any;
    port : number;
    routers : IRouter[]

    constructor() { 
        this.app = express();
        
        if(process.env.PORT != undefined) {
            this.port = parseInt(process.env.PORT);
        } else {
            this.port = 80;
        }
        this.routers = [];
        if (process.env.DBCONNECTIONSTRING != undefined) {
            this.dbConnectionString = process.env.DBCONNECTIONSTRING;
        } else {
            console.log("no db connection string in env");
            process.exit(1);
        }
    }

    async run() {
        return new Promise((resolve,reject) => {

            mongoose.connect(this.dbConnectionString, {useNewUrlParser: true}).then(async () => {
                console.log("back-end connected to Atlas");

                mongoose.connection.on('error', (err) => {
                    reject(err);
                });
                this.server = this.app.listen(this.port,() => {
                    
                    //TODO: Add more routers
                    this.routers.push(new AccountRouter(this.app, "/accounts", new AccountManager));
                    this.routers.push(new VulnerabilityRouter(this.app,"/vulnerabilities"));
                    this.routers.push(new SoftwareRouter(this.app,"/software"));
                    
                    console.log("Server online");
                    
                    this.server.on("close",() => {
                        console.log("Shutting down.")
                    });
                    
                    resolve(undefined);
                });
            });
        });
    }
}

export default App;